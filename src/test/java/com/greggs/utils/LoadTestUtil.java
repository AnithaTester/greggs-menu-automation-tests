package com.greggs.utils;import java.util.ArrayList;import java.util.List;import java.util.concurrent.*;import java.util.concurrent.atomic.AtomicInteger;public class LoadTestUtil {    public static LoadTestResult executeConcurrentUsers(int userCount, int durationSeconds, Runnable testAction) {        ExecutorService executor = Executors.newFixedThreadPool(userCount);        AtomicInteger successCount = new AtomicInteger(0);        AtomicInteger failureCount = new AtomicInteger(0);        List<Long> responseTimes = new ArrayList<>();        List<Future<?>> futures = new ArrayList<>();        long startTime = System.currentTimeMillis();        long endTime = startTime + (durationSeconds * 1000);        // Submit tasks for all users        for (int i = 0; i < userCount; i++) {            Future<?> future = executor.submit(() -> {                while (System.currentTimeMillis() < endTime) {                    long requestStart = System.currentTimeMillis();                    try {                        testAction.run();                        successCount.incrementAndGet();                    } catch (Exception e) {                        failureCount.incrementAndGet();                    } finally {                        long responseTime = System.currentTimeMillis() - requestStart;                        responseTimes.add(responseTime);                    }                    // Small delay between requests                    try { Thread.sleep(100); } catch (InterruptedException e) { break; }                }            });            futures.add(future);        }        // Wait for all tasks to complete        for (Future<?> future : futures) {            try {                future.get(durationSeconds + 10, TimeUnit.SECONDS);            } catch (Exception e) {                // Task timed out or failed            }        }        executor.shutdown();        // Calculate statistics        long totalTime = System.currentTimeMillis() - startTime;        long totalRequests = successCount.get() + failureCount.get();        double requestsPerSecond = totalRequests / (durationSeconds * 1.0);        // Calculate average response time        double avgResponseTime = responseTimes.stream()                .mapToLong(Long::longValue)                .average()                .orElse(0.0);        // Calculate percentile response times        responseTimes.sort(Long::compareTo);        long p95ResponseTime = responseTimes.get((int) (responseTimes.size() * 0.95));        long p99ResponseTime = responseTimes.get((int) (responseTimes.size() * 0.99));        return new LoadTestResult(                userCount,                durationSeconds,                successCount.get(),                failureCount.get(),                requestsPerSecond,                avgResponseTime,                p95ResponseTime,                p99ResponseTime        );    }    public static class LoadTestResult {        private final int userCount;        private final int durationSeconds;        private final int successCount;        private final int failureCount;        private final double requestsPerSecond;        private final double avgResponseTime;        private final long p95ResponseTime;        private final long p99ResponseTime;        public LoadTestResult(int userCount, int durationSeconds, int successCount,                              int failureCount, double requestsPerSecond,                              double avgResponseTime, long p95ResponseTime, long p99ResponseTime) {            this.userCount = userCount;            this.durationSeconds = durationSeconds;            this.successCount = successCount;            this.failureCount = failureCount;            this.requestsPerSecond = requestsPerSecond;            this.avgResponseTime = avgResponseTime;            this.p95ResponseTime = p95ResponseTime;            this.p99ResponseTime = p99ResponseTime;        }        // Getters        public int getUserCount() { return userCount; }        public int getDurationSeconds() { return durationSeconds; }        public int getSuccessCount() { return successCount; }        public int getFailureCount() { return failureCount; }        public double getRequestsPerSecond() { return requestsPerSecond; }        public double getAvgResponseTime() { return avgResponseTime; }        public long getP95ResponseTime() { return p95ResponseTime; }        public long getP99ResponseTime() { return p99ResponseTime; }        public double getSuccessRate() {            return (successCount + failureCount) == 0 ? 0 :                    (successCount * 100.0) / (successCount + failureCount);        }        @Override        public String toString() {            return String.format(                    "LoadTestResult{users=%d, duration=%ds, success=%d, failures=%d, " +                            "rps=%.2f, avgResponse=%.2fms, p95=%dms, p99=%dms, successRate=%.2f%%}",                    userCount, durationSeconds, successCount, failureCount,                    requestsPerSecond, avgResponseTime, p95ResponseTime, p99ResponseTime,                    getSuccessRate()            );        }    }}