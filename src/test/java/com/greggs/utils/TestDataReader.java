package com.greggs.utils;import com.fasterxml.jackson.databind.ObjectMapper;import com.fasterxml.jackson.core.type.TypeReference;import java.io.IOException;import java.io.InputStream;import java.util.*;public class TestDataReader {    private static final ObjectMapper mapper = new ObjectMapper();    // Method to read JSON file and return as specified type    public static <T> T readJsonFile(String filePath, Class<T> valueType) {        try (InputStream inputStream = TestDataReader.class.getClassLoader().getResourceAsStream(filePath)) {            if (inputStream == null) {                throw new RuntimeException("Test data file not found: " + filePath);            }            return mapper.readValue(inputStream, valueType);        } catch (IOException e) {            throw new RuntimeException("Error reading test data file: " + filePath, e);        }    }    // Method to read JSON file and return as Map (no second parameter needed)    public static Map<String, Object> readJsonFile(String filePath) {        try (InputStream inputStream = TestDataReader.class.getClassLoader().getResourceAsStream(filePath)) {            if (inputStream == null) {                System.err.println("Test data file not found: " + filePath);                return new HashMap<>();            }            return mapper.readValue(inputStream, new TypeReference<Map<String, Object>>() {});        } catch (IOException e) {            System.err.println("Error reading test data file: " + filePath + " - " + e.getMessage());            return new HashMap<>();        }    }    // Method to read JSON array file    public static <T> List<T> readJsonArrayFile(String filePath, Class<T> elementType) {        try (InputStream inputStream = TestDataReader.class.getClassLoader().getResourceAsStream(filePath)) {            if (inputStream == null) {                throw new RuntimeException("Test data file not found: " + filePath);            }            return mapper.readValue(inputStream, mapper.getTypeFactory().constructCollectionType(List.class, elementType));        } catch (IOException e) {            throw new RuntimeException("Error reading test data file: " + filePath, e);        }    }    // Specific test data getters with proper error handling    public static List<String> getExpectedCategories() {        try {            Map<String, Object> menuData = readJsonFile("testdata/menu/categories.json");            if (menuData.containsKey("expectedCategories")) {                return (List<String>) menuData.get("expectedCategories");            }        } catch (Exception e) {            System.err.println("Error reading categories: " + e.getMessage());        }        // Return default categories if file not found or error        return Arrays.asList("Sandwiches", "Bakes", "Sweet Treats", "Savoury", "Breakfast", "Drinks");    }    public static Map<String, Object> getPerformanceThresholds() {        try {            Map<String, Object> performanceData = readJsonFile("testdata/performance/benchmarks.json");            if (performanceData.containsKey("performanceThresholds")) {                return (Map<String, Object>) performanceData.get("performanceThresholds");            }        } catch (Exception e) {            System.err.println("Error reading performance thresholds: " + e.getMessage());        }        // Return default thresholds        return Map.of(                "pageLoadTime", Map.of("excellent", 2000, "good", 3000, "poor", 5000),                "largestContentfulPaint", Map.of("excellent", 1500, "good", 2500, "poor", 4000),                "firstInputDelay", Map.of("excellent", 50, "good", 100, "poor", 300),                "cumulativeLayoutShift", Map.of("excellent", 0.05, "good", 0.10, "poor", 0.25)        );    }    public static List<String> getValidSearchTerms() {        try {            Map<String, Object> searchData = readJsonFile("testdata/menu/search-terms.json");            if (searchData.containsKey("validSearchTerms")) {                return (List<String>) searchData.get("validSearchTerms");            }        } catch (Exception e) {            System.err.println("Error reading search terms: " + e.getMessage());        }        // Return default search terms        return Arrays.asList("sausage", "roll", "bake", "sandwich", "coffee");    }    public static List<String> getInvalidSearchTerms() {        try {            Map<String, Object> searchData = readJsonFile("testdata/menu/search-terms.json");            if (searchData.containsKey("invalidSearchTerms")) {                return (List<String>) searchData.get("invalidSearchTerms");            }        } catch (Exception e) {            System.err.println("Error reading invalid search terms: " + e.getMessage());        }        // Return default invalid terms        return Arrays.asList("xyz123", "nonexistentproduct");    }    public static List<String> getFoodKeywords() {        try {            Map<String, Object> menuData = readJsonFile("testdata/menu/categories.json");            if (menuData.containsKey("foodKeywords")) {                return (List<String>) menuData.get("foodKeywords");            }        } catch (Exception e) {            System.err.println("Error reading food keywords: " + e.getMessage());        }        // Default food keywords        return Arrays.asList("sausage", "roll", "bake", "sandwich", "coffee", "tea", "breakfast");    }    // Method to get popular items    public static List<Map<String, Object>> getPopularItems() {        try {            Map<String, Object> productsData = readJsonFile("testdata/menu/products.json");            if (productsData.containsKey("popularItems")) {                return (List<Map<String, Object>>) productsData.get("popularItems");            }        } catch (Exception e) {            System.err.println("Error reading popular items: " + e.getMessage());        }        // Return default popular items        return Arrays.asList(                Map.of("name", "Sausage Roll", "category", "Bakes", "vegetarian", false),                Map.of("name", "Vegan Sausage Roll", "category", "Bakes", "vegetarian", true)        );    }    // Helper method to safely get nested maps    @SuppressWarnings("unchecked")    public static Map<String, Object> getNestedMap(Map<String, Object> parent, String key) {        if (parent != null && parent.containsKey(key)) {            Object nested = parent.get(key);            if (nested instanceof Map) {                return (Map<String, Object>) nested;            }        }        return new HashMap<>();    }    // Helper method to safely get nested lists    @SuppressWarnings("unchecked")    public static List<Object> getNestedList(Map<String, Object> parent, String key) {        if (parent != null && parent.containsKey(key)) {            Object nested = parent.get(key);            if (nested instanceof List) {                return (List<Object>) nested;            }        }        return new ArrayList<>();    }    // Method to check if test data files exist    public static boolean testDataFilesExist() {        String[] requiredFiles = {                "testdata/menu/categories.json",                "testdata/menu/products.json",                "testdata/menu/search-terms.json",                "testdata/performance/benchmarks.json",                "testdata/users/test-users.json",                "testdata/config/test-environments.json"        };        for (String filePath : requiredFiles) {            try (InputStream inputStream = TestDataReader.class.getClassLoader().getResourceAsStream(filePath)) {                if (inputStream == null) {                    System.err.println("Missing test data file: " + filePath);                    return false;                }            } catch (IOException e) {                System.err.println("Error checking file: " + filePath);                return false;            }        }        return true;    }}