package com.greggs.utils;import org.openqa.selenium.By;import org.openqa.selenium.JavascriptExecutor;import org.openqa.selenium.WebDriver;import org.openqa.selenium.WebElement;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;public class AccessibilityUtil {    // ========== IMAGE ACCESSIBILITY ==========    public static int getImagesWithAltTextCount(WebDriver driver) {        try {            Long result = (Long) ((JavascriptExecutor) driver).executeScript(                    "var images = document.getElementsByTagName('img'); " +                            "var count = 0; " +                            "for (var i = 0; i < images.length; i++) { " +                            "  if (images[i].alt && images[i].alt.trim() !== '') { " +                            "    count++; " +                            "  } " +                            "} " +                            "return count;"            );            return result != null ? result.intValue() : 0;        } catch (Exception e) {            System.err.println("Error counting images with alt text: " + e.getMessage());            return 0;        }    }    public static int getTotalImageCount(WebDriver driver) {        try {            Long result = (Long) ((JavascriptExecutor) driver).executeScript(                    "return document.getElementsByTagName('img').length;"            );            return result != null ? result.intValue() : 0;        } catch (Exception e) {            System.err.println("Error counting total images: " + e.getMessage());            return 0;        }    }    public static Map<String, Object> getImageAccessibilityAnalysis(WebDriver driver) {        Map<String, Object> analysis = new HashMap<>();        try {            @SuppressWarnings("unchecked")            Map<String, Object> result = (Map<String, Object>) ((JavascriptExecutor) driver).executeScript(                    "var images = document.getElementsByTagName('img'); " +                            "var analysis = { " +                            "  totalImages: images.length, " +                            "  imagesWithAlt: 0, " +                            "  imagesWithoutAlt: 0, " +                            "  decorativeImages: 0, " +                            "  informativeImages: 0, " +                            "  imagesWithEmptyAlt: 0, " +                            "  imagesWithLongAlt: 0 " +                            "}; " +                            "for (var i = 0; i < images.length; i++) { " +                            "  var img = images[i]; " +                            "  var alt = img.alt || ''; " +                            "  var src = img.src || ''; " +                            "  var isDecorative = alt === '' && (img.getAttribute('role') === 'presentation' || img.getAttribute('aria-hidden') === 'true'); " +                            "  " +                            "  if (alt.trim() !== '') { " +                            "    analysis.imagesWithAlt++; " +                            "    if (alt.length > 150) analysis.imagesWithLongAlt++; " +                            "    if (!isDecorative) analysis.informativeImages++; " +                            "  } else { " +                            "    analysis.imagesWithoutAlt++; " +                            "    if (isDecorative) analysis.decorativeImages++; " +                            "  } " +                            "} " +                            "return analysis;"            );            analysis.putAll(result);        } catch (Exception e) {            System.err.println("Error performing image accessibility analysis: " + e.getMessage());            // Set default values            analysis.put("totalImages", 0);            analysis.put("imagesWithAlt", 0);            analysis.put("imagesWithoutAlt", 0);            analysis.put("decorativeImages", 0);            analysis.put("informativeImages", 0);            analysis.put("imagesWithEmptyAlt", 0);            analysis.put("imagesWithLongAlt", 0);        }        return analysis;    }    // ========== HEADING STRUCTURE ==========    public static boolean hasProperHeadingStructure(WebDriver driver) {        try {            // Check if there's at least one h1 heading            List<WebElement> h1Elements = driver.findElements(By.tagName("h1"));            if (h1Elements.isEmpty()) {                return false;            }            Boolean result = (Boolean) ((JavascriptExecutor) driver).executeScript(                    "var headings = document.querySelectorAll('h1, h2, h3, h4, h5, h6'); " +                            "if (headings.length === 0) return false; " +                            "var lastLevel = 0; " +                            "for (var i = 0; i < headings.length; i++) { " +                            "  var currentLevel = parseInt(headings[i].tagName.substring(1)); " +                            "  if (currentLevel > lastLevel + 1) { " +                            "    return false; " +                            "  } " +                            "  lastLevel = currentLevel; " +                            "} " +                            "return true;"            );            return result != null ? result : false;        } catch (Exception e) {            System.err.println("Error checking heading structure: " + e.getMessage());            return false;        }    }    public static Map<String, Object> getHeadingStructureAnalysis(WebDriver driver) {        Map<String, Object> analysis = new HashMap<>();        try {            @SuppressWarnings("unchecked")            Map<String, Object> result = (Map<String, Object>) ((JavascriptExecutor) driver).executeScript(                    "var headings = document.querySelectorAll('h1, h2, h3, h4, h5, h6'); " +                            "var analysis = { " +                            "  headingCounts: { h1: 0, h2: 0, h3: 0, h4: 0, h5: 0, h6: 0 }, " +                            "  hasH1: false, " +                            "  hasSequentialOrder: true, " +                            "  hasProperStructure: false, " +                            "  totalHeadings: headings.length " +                            "}; " +                            "" +                            "// Count headings by level " +                            "for (var i = 0; i < headings.length; i++) { " +                            "  var level = headings[i].tagName.toLowerCase(); " +                            "  analysis.headingCounts[level]++; " +                            "} " +                            "" +                            "analysis.hasH1 = analysis.headingCounts.h1 > 0; " +                            "" +                            "// Check sequential order " +                            "var lastLevel = 0; " +                            "for (var i = 0; i < headings.length; i++) { " +                            "  var currentLevel = parseInt(headings[i].tagName.substring(1)); " +                            "  if (currentLevel > lastLevel + 1 && lastLevel > 0) { " +                            "    analysis.hasSequentialOrder = false; " +                            "    break; " +                            "  } " +                            "  lastLevel = currentLevel; " +                            "} " +                            "" +                            "analysis.hasProperStructure = analysis.hasH1 && analysis.hasSequentialOrder; " +                            "return analysis;"            );            analysis.putAll(result);        } catch (Exception e) {            System.err.println("Error performing heading structure analysis: " + e.getMessage());            analysis.put("hasProperStructure", false);            analysis.put("hasH1", false);            analysis.put("hasSequentialOrder", false);            analysis.put("totalHeadings", 0);            analysis.put("headingCounts", new HashMap<String, Integer>());        }        return analysis;    }    // ========== KEYBOARD NAVIGATION ==========    public static boolean canNavigateWithKeyboard(WebDriver driver) {        try {            Boolean result = (Boolean) ((JavascriptExecutor) driver).executeScript(                    "var focusableElements = document.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'); " +                            "if (focusableElements.length === 0) return false; " +                            "try { " +                            "  focusableElements[0].focus(); " +                            "  return document.activeElement === focusableElements[0]; " +                            "} catch(e) { " +                            "  return false; " +                            "}"            );            return result != null ? result : false;        } catch (Exception e) {            System.err.println("Error checking keyboard navigation: " + e.getMessage());            return false;        }    }    public static Map<String, Object> getKeyboardNavigationAnalysis(WebDriver driver) {        Map<String, Object> analysis = new HashMap<>();        try {            @SuppressWarnings("unchecked")            Map<String, Object> result = (Map<String, Object>) ((JavascriptExecutor) driver).executeScript(                    "var focusableElements = document.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'); " +                            "var analysis = { " +                            "  focusableElements: focusableElements.length, " +                            "  tabbableElements: 0, " +                            "  canNavigate: false, " +                            "  hasFocusIndicators: false, " +                            "  hasSkipLinks: false, " +                            "  focusableWithoutText: 0 " +                            "}; " +                            "" +                            "// Check if we can focus on first element " +                            "if (focusableElements.length > 0) { " +                            "  try { " +                            "    focusableElements[0].focus(); " +                            "    analysis.canNavigate = document.activeElement === focusableElements[0]; " +                            "  } catch(e) {} " +                            "} " +                            "" +                            "// Count tabbable elements (positive tabindex or naturally focusable) " +                            "for (var i = 0; i < focusableElements.length; i++) { " +                            "  var element = focusableElements[i]; " +                            "  var tabIndex = element.getAttribute('tabindex'); " +                            "  if (!tabIndex || parseInt(tabIndex) >= 0) { " +                            "    analysis.tabbableElements++; " +                            "  } " +                            "  " +                            "  // Check for focus indicators " +                            "  var style = window.getComputedStyle(element); " +                            "  if (style.outline !== 'none' && style.outline !== '' || " +                            "      style.boxShadow !== 'none' && style.boxShadow !== '' || " +                            "      element.classList.contains('focus-visible')) { " +                            "    analysis.hasFocusIndicators = true; " +                            "  } " +                            "  " +                            "  // Check for elements without text " +                            "  var text = element.textContent || element.getAttribute('aria-label') || element.getAttribute('title') || ''; " +                            "  if (text.trim() === '') { " +                            "    analysis.focusableWithoutText++; " +                            "  } " +                            "} " +                            "" +                            "// Check for skip links " +                            "var skipLinks = document.querySelectorAll('a[href*=\"#content\"], a[href*=\"#main\"], a[href*=\"#contentarea\"], a[class*=\"skip\"], a[class*=\"sr\"], [aria-label*=\"skip\" i]'); " +                            "analysis.hasSkipLinks = skipLinks.length > 0; " +                            "" +                            "return analysis;"            );            analysis.putAll(result);        } catch (Exception e) {            System.err.println("Error performing keyboard navigation analysis: " + e.getMessage());            analysis.put("canNavigate", false);            analysis.put("focusableElements", 0);            analysis.put("tabbableElements", 0);            analysis.put("hasFocusIndicators", false);            analysis.put("hasSkipLinks", false);            analysis.put("focusableWithoutText", 0);        }        return analysis;    }    // ========== FORM ACCESSIBILITY ==========    public static boolean hasFormLabels(WebDriver driver) {        try {            Boolean result = (Boolean) ((JavascriptExecutor) driver).executeScript(                    "var formElements = document.querySelectorAll('input, select, textarea'); " +                            "if (formElements.length === 0) return true; " +                            "var labeledCount = 0; " +                            "for (var i = 0; i < formElements.length; i++) { " +                            "  var element = formElements[i]; " +                            "  var hasLabel = element.labels && element.labels.length > 0; " +                            "  var hasAriaLabel = element.hasAttribute('aria-label') && element.getAttribute('aria-label').trim() !== ''; " +                            "  var hasAriaLabelledBy = element.hasAttribute('aria-labelledby'); " +                            "  var hasTitle = element.hasAttribute('title') && element.getAttribute('title').trim() !== ''; " +                            "  var hasPlaceholder = element.hasAttribute('placeholder') && element.getAttribute('placeholder').trim() !== ''; " +                            "  if (hasLabel || hasAriaLabel || hasAriaLabelledBy || hasTitle || hasPlaceholder) { " +                            "    labeledCount++; " +                            "  } " +                            "} " +                            "return labeledCount === formElements.length;"            );            return result != null ? result : false;        } catch (Exception e) {            System.err.println("Error checking form labels: " + e.getMessage());            return false;        }    }    public static boolean hasFormElements(WebDriver driver) {        try {            Long result = (Long) ((JavascriptExecutor) driver).executeScript(                    "return document.querySelectorAll('input, select, textarea').length;"            );            return result != null && result > 0;        } catch (Exception e) {            System.err.println("Error checking form elements: " + e.getMessage());            return false;        }    }    public static Map<String, Object> getFormAccessibilityAnalysis(WebDriver driver) {        Map<String, Object> analysis = new HashMap<>();        try {            @SuppressWarnings("unchecked")            Map<String, Object> result = (Map<String, Object>) ((JavascriptExecutor) driver).executeScript(                    "var formElements = document.querySelectorAll('input, select, textarea'); " +                            "var analysis = { " +                            "  totalInputs: formElements.length, " +                            "  labeledInputs: 0, " +                            "  unlabeledInputs: 0, " +                            "  hasFormElements: formElements.length > 0, " +                            "  hasFormLabels: false, " +                            "  inputsWithAria: 0, " +                            "  inputsWithProperType: 0 " +                            "}; " +                            "" +                            "for (var i = 0; i < formElements.length; i++) { " +                            "  var element = formElements[i]; " +                            "  var isLabeled = false; " +                            "" +                            "  // Check for various labeling methods " +                            "  if (element.labels && element.labels.length > 0) { " +                            "    isLabeled = true; " +                            "  } else if (element.hasAttribute('aria-label') && element.getAttribute('aria-label').trim() !== '') { " +                            "    isLabeled = true; " +                            "    analysis.inputsWithAria++; " +                            "  } else if (element.hasAttribute('aria-labelledby')) { " +                            "    isLabeled = true; " +                            "    analysis.inputsWithAria++; " +                            "  } else if (element.hasAttribute('title') && element.getAttribute('title').trim() !== '') { " +                            "    isLabeled = true; " +                            "  } else if (element.hasAttribute('placeholder') && element.getAttribute('placeholder').trim() !== '') { " +                            "    isLabeled = true; " +                            "  } " +                            "" +                            "  // Check for proper input types " +                            "  var type = element.getAttribute('type') || 'text'; " +                            "  var properTypes = ['text', 'email', 'password', 'search', 'tel', 'url', 'number', 'date', 'time']; " +                            "  if (properTypes.includes(type)) { " +                            "    analysis.inputsWithProperType++; " +                            "  } " +                            "" +                            "  if (isLabeled) { " +                            "    analysis.labeledInputs++; " +                            "  } else { " +                            "    analysis.unlabeledInputs++; " +                            "  } " +                            "} " +                            "" +                            "analysis.hasFormLabels = analysis.labeledInputs === analysis.totalInputs; " +                            "return analysis;"            );            analysis.putAll(result);        } catch (Exception e) {            System.err.println("Error performing form accessibility analysis: " + e.getMessage());            analysis.put("totalInputs", 0);            analysis.put("labeledInputs", 0);            analysis.put("unlabeledInputs", 0);            analysis.put("hasFormElements", false);            analysis.put("hasFormLabels", false);            analysis.put("inputsWithAria", 0);            analysis.put("inputsWithProperType", 0);        }        return analysis;    }    // ========== COLOR CONTRAST ==========    public static boolean hasGoodColorContrast(WebDriver driver) {        try {            // This is a basic check - for comprehensive contrast checking, consider integrating with a library like axe-core            Boolean result = (Boolean) ((JavascriptExecutor) driver).executeScript(                    "var elements = document.querySelectorAll('p, span, div, h1, h2, h3, h4, h5, h6, a, button, label'); " +                            "for (var i = 0; i < elements.length; i++) { " +                            "  var style = window.getComputedStyle(elements[i]); " +                            "  var backgroundColor = style.backgroundColor; " +                            "  var color = style.color; " +                            "  var fontSize = parseFloat(style.fontSize); " +                            "  var fontWeight = parseInt(style.fontWeight); " +                            "  " +                            "  // Basic check for obvious contrast issues " +                            "  if (backgroundColor === color || " +                            "      (backgroundColor === 'rgb(255, 255, 255)' && color === 'rgb(255, 255, 255)') || " +                            "      (backgroundColor === 'rgb(0, 0, 0)' && color === 'rgb(0, 0, 0)')) { " +                            "    return false; " +                            "  } " +                            "} " +                            "return true;"            );            return result != null ? result : true;        } catch (Exception e) {            System.err.println("Error checking color contrast: " + e.getMessage());            return true;        }    }    public static Map<String, Object> getColorContrastAnalysis(WebDriver driver) {        Map<String, Object> analysis = new HashMap<>();        try {            @SuppressWarnings("unchecked")            Map<String, Object> result = (Map<String, Object>) ((JavascriptExecutor) driver).executeScript(                    "var textElements = document.querySelectorAll('p, span, div, h1, h2, h3, h4, h5, h6, a, button, label, li, td, th'); " +                            "var analysis = { " +                            "  goodContrast: true, " +                            "  lowContrastElements: 0, " +                            "  totalElementsChecked: textElements.length, " +                            "  averageContrastRatio: 7.0 " + // Default to good contrast                            "}; " +                            "" +                            "var totalRatio = 0; " +                            "var elementsWithRatio = 0; " +                            "" +                            "for (var i = 0; i < textElements.length; i++) { " +                            "  var element = textElements[i]; " +                            "  var style = window.getComputedStyle(element); " +                            "  var bgColor = style.backgroundColor; " +                            "  var textColor = style.color; " +                            "  " +                            "  // Simple heuristic for contrast detection " +                            "  if (bgColor && textColor && bgColor !== 'rgba(0, 0, 0, 0)') { " +                            "    // Extract RGB values (simplified) " +                            "    var bgMatch = bgColor.match(/\\d+/g); " +                            "    var textMatch = textColor.match(/\\d+/g); " +                            "    " +                            "    if (bgMatch && textMatch) { " +                            "      var bgBrightness = (parseInt(bgMatch[0]) + parseInt(bgMatch[1]) + parseInt(bgMatch[2])) / 3; " +                            "      var textBrightness = (parseInt(textMatch[0]) + parseInt(textMatch[1]) + parseInt(textMatch[2])) / 3; " +                            "      var contrastRatio = Math.abs(bgBrightness - textBrightness) / 255; " +                            "      " +                            "      if (contrastRatio < 0.3) { // Low contrast threshold " +                            "        analysis.lowContrastElements++; " +                            "        analysis.goodContrast = false; " +                            "      } " +                            "      " +                            "      totalRatio += contrastRatio; " +                            "      elementsWithRatio++; " +                            "    } " +                            "  } " +                            "} " +                            "" +                            "if (elementsWithRatio > 0) { " +                            "  analysis.averageContrastRatio = (totalRatio / elementsWithRatio) * 21; // Scale to WCAG ratio " +                            "} " +                            "" +                            "return analysis;"            );            analysis.putAll(result);        } catch (Exception e) {            System.err.println("Error performing color contrast analysis: " + e.getMessage());            analysis.put("goodContrast", true);            analysis.put("lowContrastElements", 0);            analysis.put("totalElementsChecked", 0);            analysis.put("averageContrastRatio", 7.0);        }        return analysis;    }    // ========== ARIA ATTRIBUTES ==========    public static Map<String, Object> getAriaAttributesAnalysis(WebDriver driver) {        Map<String, Object> analysis = new HashMap<>();        try {            @SuppressWarnings("unchecked")            Map<String, Object> result = (Map<String, Object>) ((JavascriptExecutor) driver).executeScript(                    "var ariaElements = document.querySelectorAll('[aria-*], [role]'); " +                            "var analysis = { " +                            "  totalAriaElements: ariaElements.length, " +                            "  landmarkRoles: 0, " +                            "  ariaLabels: 0, " +                            "  ariaDescribedBy: 0, " +                            "  ariaHidden: 0, " +                            "  ariaLive: 0, " +                            "  hasValidAria: true " +                            "}; " +                            "" +                            "var landmarkRoles = ['banner', 'navigation', 'main', 'complementary', 'contentinfo', 'search', 'form']; " +                            "" +                            "for (var i = 0; i < ariaElements.length; i++) { " +                            "  var element = ariaElements[i]; " +                            "  " +                            "  // Count specific ARIA attributes " +                            "  if (element.hasAttribute('aria-label')) analysis.ariaLabels++; " +                            "  if (element.hasAttribute('aria-describedby')) analysis.ariaDescribedBy++; " +                            "  if (element.hasAttribute('aria-hidden')) analysis.ariaHidden++; " +                            "  if (element.hasAttribute('aria-live')) analysis.ariaLive++; " +                            "  " +                            "  // Check for landmark roles " +                            "  var role = element.getAttribute('role'); " +                            "  if (role && landmarkRoles.includes(role)) { " +                            "    analysis.landmarkRoles++; " +                            "  } " +                            "  " +                            "  // Basic validation checks " +                            "  if (element.hasAttribute('aria-hidden') && element.getAttribute('aria-hidden') === 'true') { " +                            "    if (element.tabIndex >= 0) { " +                            "      analysis.hasValidAria = false; " +                            "    } " +                            "  } " +                            "} " +                            "" +                            "return analysis;"            );            analysis.putAll(result);        } catch (Exception e) {            System.err.println("Error performing ARIA attributes analysis: " + e.getMessage());            analysis.put("totalAriaElements", 0);            analysis.put("landmarkRoles", 0);            analysis.put("ariaLabels", 0);            analysis.put("ariaDescribedBy", 0);            analysis.put("ariaHidden", 0);            analysis.put("ariaLive", 0);            analysis.put("hasValidAria", true);        }        return analysis;    }    // ========== SEMANTIC HTML ==========    public static Map<String, Object> getSemanticHTMLAnalysis(WebDriver driver) {        Map<String, Object> analysis = new HashMap<>();        try {            @SuppressWarnings("unchecked")            Map<String, Object> result = (Map<String, Object>) ((JavascriptExecutor) driver).executeScript(                    "var semanticTags = ['header', 'nav', 'main', 'section', 'article', 'aside', 'footer', 'figure', 'figcaption', 'time', 'mark', 'summary', 'details']; " +                            "var analysis = { " +                            "  totalSemanticElements: 0, " +                            "  elementCounts: {}, " +                            "  semanticScore: 0 " +                            "}; " +                            "" +                            "// Initialize counts " +                            "semanticTags.forEach(function(tag) { " +                            "  analysis.elementCounts[tag] = 0; " +                            "}); " +                            "" +                            "// Count semantic elements " +                            "semanticTags.forEach(function(tag) { " +                            "  var elements = document.getElementsByTagName(tag); " +                            "  analysis.elementCounts[tag] = elements.length; " +                            "  analysis.totalSemanticElements += elements.length; " +                            "}); " +                            "" +                            "// Calculate semantic score (ratio of semantic to non-semantic structural elements) " +                            "var totalDivs = document.getElementsByTagName('div').length; " +                            "var totalSpans = document.getElementsByTagName('span').length; " +                            "var totalStructuralElements = analysis.totalSemanticElements + totalDivs + totalSpans; " +                            "" +                            "if (totalStructuralElements > 0) { " +                            "  analysis.semanticScore = analysis.totalSemanticElements / totalStructuralElements; " +                            "} " +                            "" +                            "return analysis;"            );            analysis.putAll(result);        } catch (Exception e) {            System.err.println("Error performing semantic HTML analysis: " + e.getMessage());            analysis.put("totalSemanticElements", 0);            analysis.put("elementCounts", new HashMap<String, Integer>());            analysis.put("semanticScore", 0.0);        }        return analysis;    }    // ========== COMPREHENSIVE ACCESSIBILITY AUDIT ==========    public static Map<String, Object> getComprehensiveAccessibilityAudit(WebDriver driver) {        Map<String, Object> audit = new HashMap<>();        try {            // Run all analyses            Map<String, Object> imageAnalysis = getImageAccessibilityAnalysis(driver);            Map<String, Object> headingAnalysis = getHeadingStructureAnalysis(driver);            Map<String, Object> keyboardAnalysis = getKeyboardNavigationAnalysis(driver);            Map<String, Object> formAnalysis = getFormAccessibilityAnalysis(driver);            Map<String, Object> contrastAnalysis = getColorContrastAnalysis(driver);            Map<String, Object> ariaAnalysis = getAriaAttributesAnalysis(driver);            Map<String, Object> semanticAnalysis = getSemanticHTMLAnalysis(driver);            // Calculate overall score            double overallScore = calculateOverallAccessibilityScore(                    imageAnalysis, headingAnalysis, keyboardAnalysis,                    formAnalysis, contrastAnalysis, ariaAnalysis, semanticAnalysis            );            // Compile critical issues and warnings            List<String> criticalIssues = new ArrayList<>();            List<String> warnings = new ArrayList<>();            compileAccessibilityIssues(imageAnalysis, headingAnalysis, keyboardAnalysis,                    formAnalysis, contrastAnalysis, ariaAnalysis, semanticAnalysis,                    criticalIssues, warnings);            // Category scores            Map<String, Double> categoryScores = new HashMap<>();            categoryScores.put("images", calculateImageAccessibilityScore(imageAnalysis));            categoryScores.put("headings", calculateHeadingAccessibilityScore(headingAnalysis));            categoryScores.put("keyboard", calculateKeyboardAccessibilityScore(keyboardAnalysis));            categoryScores.put("forms", calculateFormAccessibilityScore(formAnalysis));            categoryScores.put("contrast", calculateContrastAccessibilityScore(contrastAnalysis));            categoryScores.put("aria", calculateAriaAccessibilityScore(ariaAnalysis));            categoryScores.put("semantic", (Double) semanticAnalysis.get("semanticScore"));            audit.put("overallScore", overallScore);            audit.put("categoryScores", categoryScores);            audit.put("criticalIssues", criticalIssues);            audit.put("warnings", warnings);            audit.put("imageAnalysis", imageAnalysis);            audit.put("headingAnalysis", headingAnalysis);            audit.put("keyboardAnalysis", keyboardAnalysis);            audit.put("formAnalysis", formAnalysis);            audit.put("contrastAnalysis", contrastAnalysis);            audit.put("ariaAnalysis", ariaAnalysis);            audit.put("semanticAnalysis", semanticAnalysis);        } catch (Exception e) {            System.err.println("Error performing comprehensive accessibility audit: " + e.getMessage());            audit.put("overallScore", 0.0);            audit.put("categoryScores", new HashMap<String, Double>());            audit.put("criticalIssues", new ArrayList<String>());            audit.put("warnings", new ArrayList<String>());        }        return audit;    }    // ========== SCORING CALCULATION METHODS ==========    private static double calculateOverallAccessibilityScore(Map<String, Object>... analyses) {        double totalScore = 0.0;        int categoryCount = 0;        for (Map<String, Object> analysis : analyses) {            if (analysis.containsKey("semanticScore")) {                totalScore += (Double) analysis.get("semanticScore");                categoryCount++;            }        }        return categoryCount > 0 ? (totalScore / categoryCount) * 100 : 0.0;    }    private static double calculateImageAccessibilityScore(Map<String, Object> imageAnalysis) {        int totalImages = (Integer) imageAnalysis.get("totalImages");        int imagesWithAlt = (Integer) imageAnalysis.get("imagesWithAlt");        if (totalImages == 0) return 1.0;        return (double) imagesWithAlt / totalImages;    }    private static double calculateHeadingAccessibilityScore(Map<String, Object> headingAnalysis) {        boolean hasH1 = (Boolean) headingAnalysis.get("hasH1");        boolean hasSequentialOrder = (Boolean) headingAnalysis.get("hasSequentialOrder");        int totalHeadings = (Integer) headingAnalysis.get("totalHeadings");        if (totalHeadings == 0) return 0.5; // No headings is better than bad headings        double score = 0.0;        if (hasH1) score += 0.5;        if (hasSequentialOrder) score += 0.5;        return score;    }    private static double calculateKeyboardAccessibilityScore(Map<String, Object> keyboardAnalysis) {        boolean canNavigate = (Boolean) keyboardAnalysis.get("canNavigate");        boolean hasFocusIndicators = (Boolean) keyboardAnalysis.get("hasFocusIndicators");        boolean hasSkipLinks = (Boolean) keyboardAnalysis.get("hasSkipLinks");        int focusableElements = (Integer) keyboardAnalysis.get("focusableElements");        if (focusableElements == 0) return 0.5; // No focusable elements might be acceptable        double score = 0.0;        if (canNavigate) score += 0.4;        if (hasFocusIndicators) score += 0.3;        if (hasSkipLinks) score += 0.3;        return score;    }    private static double calculateFormAccessibilityScore(Map<String, Object> formAnalysis) {        int totalInputs = (Integer) formAnalysis.get("totalInputs");        int labeledInputs = (Integer) formAnalysis.get("labeledInputs");        if (totalInputs == 0) return 1.0;        return (double) labeledInputs / totalInputs;    }    private static double calculateContrastAccessibilityScore(Map<String, Object> contrastAnalysis) {        boolean goodContrast = (Boolean) contrastAnalysis.get("goodContrast");        double averageContrastRatio = (Double) contrastAnalysis.get("averageContrastRatio");        if (goodContrast) {            if (averageContrastRatio >= 7.0) return 1.0;            if (averageContrastRatio >= 4.5) return 0.8;            return 0.6;        }        return 0.3;    }    private static double calculateAriaAccessibilityScore(Map<String, Object> ariaAnalysis) {        int totalAriaElements = (Integer) ariaAnalysis.get("totalAriaElements");        boolean hasValidAria = (Boolean) ariaAnalysis.get("hasValidAria");        if (totalAriaElements == 0) return 0.7; // No ARIA is better than bad ARIA        return hasValidAria ? 0.9 : 0.4;    }    // ========== ISSUE COMPILATION ==========    private static void compileAccessibilityIssues(            Map<String, Object> imageAnalysis,            Map<String, Object> headingAnalysis,            Map<String, Object> keyboardAnalysis,            Map<String, Object> formAnalysis,            Map<String, Object> contrastAnalysis,            Map<String, Object> ariaAnalysis,            Map<String, Object> semanticAnalysis,            List<String> criticalIssues,            List<String> warnings) {        // Image issues        int imagesWithoutAlt = (Integer) imageAnalysis.get("imagesWithoutAlt");        int totalImages = (Integer) imageAnalysis.get("totalImages");        if (totalImages > 0 && imagesWithoutAlt == totalImages) {            criticalIssues.add("All images missing alt text");        } else if (imagesWithoutAlt > 0) {            warnings.add(imagesWithoutAlt + " images missing alt text");        }        // Heading issues        boolean hasH1 = (Boolean) headingAnalysis.get("hasH1");        if (!hasH1) {            criticalIssues.add("Page missing H1 heading");        }        // Keyboard navigation issues        boolean canNavigate = (Boolean) keyboardAnalysis.get("canNavigate");        if (!canNavigate) {            criticalIssues.add("Keyboard navigation not functional");        }        // Form issues        int unlabeledInputs = (Integer) formAnalysis.get("unlabeledInputs");        if (unlabeledInputs > 0) {            criticalIssues.add(unlabeledInputs + " form inputs missing labels");        }        // Contrast issues        boolean goodContrast = (Boolean) contrastAnalysis.get("goodContrast");        if (!goodContrast) {            warnings.add("Color contrast issues detected");        }        // ARIA issues        boolean hasValidAria = (Boolean) ariaAnalysis.get("hasValidAria");        if (!hasValidAria) {            warnings.add("Potential ARIA attribute misuse");        }        // Semantic HTML issues        double semanticScore = (Double) semanticAnalysis.get("semanticScore");        if (semanticScore < 0.3) {            warnings.add("Low semantic HTML usage");        }    }    // ========== LEGACY METHODS (for backward compatibility) ==========    public static boolean hasSkipToContentLink(WebDriver driver) {        try {            Boolean result = (Boolean) ((JavascriptExecutor) driver).executeScript(                    "var skipLinks = document.querySelectorAll('a[href*=\"#content\"], a[href*=\"#main\"], a[class*=\"skip\"], a[class*=\"sr\"]'); " +                            "return skipLinks.length > 0;"            );            return result != null ? result : false;        } catch (Exception e) {            System.err.println("Error checking skip to content links: " + e.getMessage());            return false;        }    }}