package com.greggs.config;import io.github.bonigarcia.wdm.WebDriverManager;import org.openqa.selenium.WebDriver;import org.openqa.selenium.chrome.ChromeDriver;import org.openqa.selenium.chrome.ChromeOptions;import java.util.Arrays;public class DriverFactory {    public static WebDriver createDriver(TestConfig config) {        if (config == null) {            // Create default config if none provided            config = new TestConfig();        }        String browser = config.getBrowser().toLowerCase();        System.out.println("Creating driver for browser: " + browser);        switch (browser) {            case "firefox":                return createFirefoxDriver(config);            case "chrome":            default:                return createChromeDriver(config);        }    }    private static WebDriver createChromeDriver(TestConfig config) {        try {            System.out.println("Setting up ChromeDriver...");            WebDriverManager.chromedriver().setup();            ChromeOptions options = new ChromeOptions();            options.addArguments(Arrays.asList(                    "--no-sandbox",                    "--disable-dev-shm-usage",                    "--remote-allow-origins=*",                    "--window-size=1920,1080"            ));            if (config.isHeadless()) {                options.addArguments("--headless=new");                System.out.println("Running in headless mode");            }            System.out.println("Creating Chrome driver...");            WebDriver driver = new ChromeDriver(options);            System.out.println("Chrome driver created successfully");            return driver;        } catch (Exception e) {            System.err.println("Failed to create Chrome driver: " + e.getMessage());            throw new RuntimeException("Chrome driver creation failed", e);        }    }    private static WebDriver createFirefoxDriver(TestConfig config) {        try {            System.out.println("Setting up FirefoxDriver...");            WebDriverManager.firefoxdriver().setup();            // For now, just return Chrome driver as fallback            System.out.println("Firefox not fully implemented, using Chrome instead");            return createChromeDriver(config);        } catch (Exception e) {            System.err.println("Failed to create Firefox driver: " + e.getMessage());            throw new RuntimeException("Firefox driver creation failed", e);        }    }}