package com.greggs.tests.specs;import com.aventstack.extentreports.ExtentTest;import com.greggs.tests.BaseTest;import org.openqa.selenium.By;import org.openqa.selenium.JavascriptExecutor;import org.openqa.selenium.WebElement;import org.testng.annotations.BeforeMethod;import org.testng.annotations.Test;import java.lang.reflect.Method;import java.util.List;@Test(groups = {"display", "regression", "ui"})public class MenuDisplaySpec extends BaseTest {    protected JavascriptExecutor jsExecutor;    @BeforeMethod    @Override    public void setUp(Method method) {        super.setUp(method);        if (driver != null) {            this.jsExecutor = (JavascriptExecutor) driver;        }    }    @Test(groups = {"display", "regression", "smoke"})    public void testMenuItemCompleteness() {        // Safe test initialization        ExtentTest currentTest = getTest();        if (currentTest == null) {            currentTest = extent.createTest("testMenuItemCompleteness");        }        currentTest.assignCategory("display", "regression", "smoke");        try {            logInfo("Testing Greggs website basic functionality and structure");            // Verify driver is initialized            if (driver == null) {                throw new IllegalStateException("WebDriver is null at test start");            }            // Wait for page to load (page is already navigated in BaseTest)            waitForPageLoad(3000);            // Check page loaded successfully            String title = driver.getTitle();            String currentUrl = driver.getCurrentUrl();            logInfo("Page title: " + title);            logInfo("Current URL: " + currentUrl);            // Basic assertions - page should load            assertCondition(title != null && !title.isEmpty(),                    "Page has a valid title: " + title,                    "Page should have a title",                    currentTest);            assertCondition(currentUrl.contains("greggs"),                    "Successfully navigated to Greggs website",                    "Should be on Greggs website, but current URL is: " + currentUrl,                    currentTest);            // Look for common Greggs page elements            boolean hasHeader = !driver.findElements(By.tagName("header")).isEmpty();            boolean hasMainContent = !driver.findElements(By.tagName("main")).isEmpty() ||                    !driver.findElements(By.id("main")).isEmpty();            boolean hasNavigation = !driver.findElements(By.tagName("nav")).isEmpty();            logInfo("Has header: " + hasHeader);            logInfo("Has main content: " + hasMainContent);            logInfo("Has navigation: " + hasNavigation);            // Test passes if basic page structure exists            assertCondition(hasMainContent,                    "Page has main content area",                    "Page should have main content area",                    currentTest);            markTestPassed("Basic page functionality test PASSED", currentTest);        } catch (Exception e) {            handleTestFailure(e, currentTest);        }    }    @Test(groups = {"display", "regression", "content"})    public void testMenuDataConsistency() {        // Safe test initialization        ExtentTest currentTest = getTest();        if (currentTest == null) {            currentTest = extent.createTest("testMenuDataConsistency");        }        currentTest.assignCategory("display", "regression", "content");        try {            logInfo("Testing Greggs website content consistency and completeness");            if (driver == null) {                throw new IllegalStateException("WebDriver is null at test start");            }            // Wait for page to load (page is already navigated in BaseTest)            waitForPageLoad(3000);            // Count various page elements to ensure content exists            List<WebElement> images = driver.findElements(By.tagName("img"));            List<WebElement> links = driver.findElements(By.tagName("a"));            List<WebElement> headings = driver.findElements(By.xpath("//h1|//h2|//h3|//h4|//h5|//h6"));            logInfo("Images found: " + images.size());            logInfo("Links found: " + links.size());            logInfo("Headings found: " + headings.size());            // Basic content checks            assertCondition(images.size() > 0,                    "Page has images (count: " + images.size() + ")",                    "Page should have at least some images",                    currentTest);            assertCondition(links.size() > 5,                    "Page has sufficient links (count: " + links.size() + ")",                    "Page should have multiple links, found only: " + links.size(),                    currentTest);            assertCondition(headings.size() > 0,                    "Page has headings (count: " + headings.size() + ")",                    "Page should have headings",                    currentTest);            // Check page title and URL            String pageTitle = driver.getTitle();            String pageSource = driver.getPageSource();            assertCondition(pageTitle != null && !pageTitle.isEmpty(),                    "Page has a valid title",                    "Page should have a title",                    currentTest);            assertCondition(pageSource.length() > 1000,                    "Page has substantial content (length: " + pageSource.length() + " characters)",                    "Page should have substantial content, but source length is only: " + pageSource.length(),                    currentTest);            markTestPassed("Website content consistency test PASSED", currentTest);        } catch (Exception e) {            handleTestFailure(e, currentTest);        }    }    @Test(groups = {"display", "ui", "layout"})    public void testPageLayoutStructure() {        // Safe test initialization        ExtentTest currentTest = getTest();        if (currentTest == null) {            currentTest = extent.createTest("testPageLayoutStructure");        }        currentTest.assignCategory("display", "ui", "layout");        try {            logInfo("Testing page layout and structural elements");            if (driver == null) {                throw new IllegalStateException("WebDriver is null at test start");            }            // Wait for page to load (page is already navigated in BaseTest)            waitForPageLoad(3000);            // Check for common layout elements            List<WebElement> containers = driver.findElements(By.cssSelector("div.container, div.wrapper, div.layout, div.grid"));            List<WebElement> sections = driver.findElements(By.tagName("section"));            List<WebElement> articles = driver.findElements(By.tagName("article"));            List<WebElement> footers = driver.findElements(By.tagName("footer"));            logInfo("Containers found: " + containers.size());            logInfo("Sections found: " + sections.size());            logInfo("Articles found: " + articles.size());            logInfo("Footers found: " + footers.size());            // Layout assertions            assertCondition(!containers.isEmpty() || !sections.isEmpty(),                    "Page has layout containers or sections",                    "Page should have layout containers or sections",                    currentTest);            assertCondition(!footers.isEmpty(),                    "Page has a footer",                    "Page should have a footer",                    currentTest);            markTestPassed("Page layout structure test PASSED", currentTest);        } catch (Exception e) {            handleTestFailure(e, currentTest);        }    }    @Test(groups = {"display", "responsive", "ui"})    public void testResponsiveElements() {        // Safe test initialization        ExtentTest currentTest = getTest();        if (currentTest == null) {            currentTest = extent.createTest("testResponsiveElements");        }        currentTest.assignCategory("display", "responsive", "ui");        try {            logInfo("Testing responsive design elements and mobile compatibility");            if (driver == null) {                throw new IllegalStateException("WebDriver is null at test start");            }            // Wait for page to load (page is already navigated in BaseTest)            waitForPageLoad(3000);            // Check for responsive design indicators            List<WebElement> viewportMeta = driver.findElements(By.cssSelector("meta[name='viewport']"));            List<WebElement> flexibleImages = driver.findElements(By.cssSelector("img[style*='max-width'], img[style*='width:100%']"));            List<WebElement> mediaQueries = driver.findElements(By.cssSelector("link[media], style[media]"));            // Check CSS classes that might indicate responsive design            String pageSource = driver.getPageSource().toLowerCase();            boolean hasResponsiveClasses = pageSource.contains("responsive") ||                    pageSource.contains("mobile") ||                    pageSource.contains("tablet") ||                    pageSource.contains("breakpoint");            logInfo("Viewport meta tag: " + !viewportMeta.isEmpty());            logInfo("Flexible images: " + flexibleImages.size());            logInfo("Media queries: " + mediaQueries.size());            logInfo("Responsive CSS classes: " + hasResponsiveClasses);            // Responsive design assertions            assertCondition(!viewportMeta.isEmpty(),                    "Page has viewport meta tag for responsiveness",                    "Page should have viewport meta tag for responsiveness",                    currentTest);            if (hasResponsiveClasses || !mediaQueries.isEmpty()) {                currentTest.pass("Page has responsive design indicators");            } else {                currentTest.warning("Page may lack strong responsive design indicators");            }            markTestPassed("Responsive elements test PASSED", currentTest);        } catch (Exception e) {            handleTestFailure(e, currentTest);        }    }    @Test(groups = {"display", "accessibility", "ui"})    public void testAccessibilityFeatures() {        // Safe test initialization        ExtentTest currentTest = getTest();        if (currentTest == null) {            currentTest = extent.createTest("testAccessibilityFeatures");        }        currentTest.assignCategory("display", "accessibility", "ui");        try {            logInfo("Testing accessibility features and WCAG compliance indicators");            if (driver == null) {                throw new IllegalStateException("WebDriver is null at test start");            }            // Wait for page to load (page is already navigated in BaseTest)            waitForPageLoad(3000);            // Check for accessibility features            List<WebElement> altTextImages = driver.findElements(By.cssSelector("img[alt]"));            List<WebElement> ariaElements = driver.findElements(By.cssSelector("[aria-label], [aria-describedby], [role]"));            List<WebElement> formLabels = driver.findElements(By.cssSelector("label[for]"));            List<WebElement> semanticElements = driver.findElements(By.cssSelector("header, nav, main, section, article, footer"));            logInfo("Images with alt text: " + altTextImages.size());            logInfo("ARIA elements: " + ariaElements.size());            logInfo("Form labels: " + formLabels.size());            logInfo("Semantic elements: " + semanticElements.size());            // Accessibility assertions            if (!altTextImages.isEmpty()) {                currentTest.pass("Page has images with alt text for accessibility");            } else {                currentTest.warning("Consider adding alt text to images for better accessibility");            }            if (!semanticElements.isEmpty()) {                currentTest.pass("Page uses semantic HTML elements");            } else {                currentTest.warning("Consider using more semantic HTML elements for accessibility");            }            if (ariaElements.size() > 0) {                currentTest.pass("Page uses ARIA attributes for enhanced accessibility");            }            markTestPassed("Accessibility features test PASSED", currentTest);        } catch (Exception e) {            handleTestFailure(e, currentTest);        }    }    @Test(groups = {"display", "navigation", "usability"})    public void testNavigationUsability() {        // Safe test initialization        ExtentTest currentTest = getTest();        if (currentTest == null) {            currentTest = extent.createTest("testNavigationUsability");        }        currentTest.assignCategory("display", "navigation", "usability");        try {            logInfo("Testing navigation elements and overall usability");            if (driver == null) {                throw new IllegalStateException("WebDriver is null at test start");            }            // Wait for page to load (page is already navigated in BaseTest)            waitForPageLoad(3000);            // Check navigation elements            List<WebElement> navElements = driver.findElements(By.tagName("nav"));            List<WebElement> menuItems = driver.findElements(By.cssSelector("nav a, [role='navigation'] a, .menu a, .nav a"));            List<WebElement> clickableElements = driver.findElements(By.cssSelector("a, button, [onclick], [role='button']"));            logInfo("Navigation elements: " + navElements.size());            logInfo("Menu items: " + menuItems.size());            logInfo("Clickable elements: " + clickableElements.size());            // Navigation usability assertions            assertCondition(!navElements.isEmpty(),                    "Page has navigation elements",                    "Page should have navigation elements",                    currentTest);            if (clickableElements.size() > 10) {                currentTest.pass("Page has sufficient clickable elements for usability (count: " + clickableElements.size() + ")");            } else {                currentTest.warning("Page has limited clickable elements (count: " + clickableElements.size() + ")");            }            if (menuItems.size() > 0) {                currentTest.pass("Page has menu items for navigation");            }            markTestPassed("Navigation usability test PASSED", currentTest);        } catch (Exception e) {            handleTestFailure(e, currentTest);        }    }    // ========== HELPER METHODS ==========    // Remove duplicate methods since they already exist in BaseTest    // The following methods are already available from BaseTest:    // - waitForPageLoad()    // - assertCondition()    // - markTestPassed()    // - handleTestFailure()    // - logInfo() - use this instead of logTestInfo()}