package com.greggs.tests.specs;import com.aventstack.extentreports.ExtentTest;import com.greggs.tests.BaseTest;import org.openqa.selenium.By;import org.openqa.selenium.WebElement;import org.testng.annotations.Test;import java.util.List;@Test(groups = {"search", "regression"})public class SearchFilterSpec extends BaseTest {    @Test(groups = {"search", "smoke"})    public void testSearchFunctionality() {        ExtentTest currentTest = initializeTest("testSearchFunctionality", "search", "smoke");        try {            logInfo("Testing search functionality");            navigateToHomePage();            // Look for search elements            List<WebElement> searchInputs = driver.findElements(By.cssSelector("input[type='search'], input[name*='search'], [class*='search']"));            List<WebElement> searchButtons = driver.findElements(By.cssSelector("button[type='submit'], [class*='search'], [class*='btn']"));            logInfo("Search inputs found: " + searchInputs.size());            logInfo("Search buttons found: " + searchButtons.size());            if (!searchInputs.isEmpty()) {                currentTest.pass("Search input field found");            } else {                currentTest.info("No dedicated search input found - this might be normal for the current design");            }            markTestPassed("Search functionality test completed", currentTest);        } catch (Exception e) {            handleTestFailure(e, currentTest);        }    }    @Test(groups = {"search", "filter"})    public void testFilterOptions() {        ExtentTest currentTest = initializeTest("testFilterOptions", "search", "filter");        try {            logInfo("Testing filter options");            navigateToHomePage();            // Look for filter elements            List<WebElement> filterElements = driver.findElements(By.cssSelector(                    "[class*='filter'], [class*='sort'], select, [role='listbox']"            ));            logInfo("Filter elements found: " + filterElements.size());            if (!filterElements.isEmpty()) {                currentTest.pass("Filter options available: " + filterElements.size());            } else {                currentTest.info("No specific filter elements found");            }            markTestPassed("Filter options test completed", currentTest);        } catch (Exception e) {            handleTestFailure(e, currentTest);        }    }    @Test(groups = {"search", "advanced"})    public void testAdvancedSearchFeatures() {        ExtentTest currentTest = initializeTest("testAdvancedSearchFeatures", "search", "advanced");        try {            logInfo("Testing advanced search features");            navigateToHomePage();            // Look for advanced search features            List<WebElement> dropdowns = driver.findElements(By.cssSelector("select, [role='combobox']"));            List<WebElement> checkboxes = driver.findElements(By.cssSelector("input[type='checkbox']"));            List<WebElement> radioButtons = driver.findElements(By.cssSelector("input[type='radio']"));            logInfo("Dropdowns found: " + dropdowns.size());            logInfo("Checkboxes found: " + checkboxes.size());            logInfo("Radio buttons found: " + radioButtons.size());            if (!dropdowns.isEmpty() || !checkboxes.isEmpty() || !radioButtons.isEmpty()) {                currentTest.pass("Advanced search controls available");            } else {                currentTest.info("No advanced search controls found - basic search only");            }            markTestPassed("Advanced search features test completed", currentTest);        } catch (Exception e) {            handleTestFailure(e, currentTest);        }    }    @Test(groups = {"search", "validation"})    public void testSearchValidation() {        ExtentTest currentTest = initializeTest("testSearchValidation", "search", "validation");        try {            logInfo("Testing search validation");            navigateToHomePage();            // Test search input validation            List<WebElement> searchInputs = driver.findElements(By.cssSelector("input[type='search'], input[name*='search']"));            if (!searchInputs.isEmpty()) {                WebElement searchInput = searchInputs.get(0);                // Test basic input attributes                String placeholder = searchInput.getAttribute("placeholder");                String maxLength = searchInput.getAttribute("maxlength");                if (placeholder != null && !placeholder.isEmpty()) {                    currentTest.pass("Search input has placeholder text: " + placeholder);                }                if (maxLength != null && !maxLength.isEmpty()) {                    currentTest.pass("Search input has character limit: " + maxLength);                }                currentTest.pass("Search input validation attributes checked");            } else {                currentTest.info("No search inputs found for validation testing");            }            markTestPassed("Search validation test completed", currentTest);        } catch (Exception e) {            handleTestFailure(e, currentTest);        }    }    @Test(groups = {"search", "accessibility"})    public void testSearchAccessibility() {        ExtentTest currentTest = initializeTest("testSearchAccessibility", "search", "accessibility");        try {            logInfo("Testing search accessibility features");            navigateToHomePage();            // Check accessibility attributes for search            List<WebElement> searchInputs = driver.findElements(By.cssSelector("input[type='search']"));            List<WebElement> searchLabels = driver.findElements(By.cssSelector("label[for*='search']"));            List<WebElement> ariaElements = driver.findElements(By.cssSelector("[aria-label*='search'], [role='search']"));            logInfo("Search inputs: " + searchInputs.size());            logInfo("Search labels: " + searchLabels.size());            logInfo("ARIA search elements: " + ariaElements.size());            if (!searchLabels.isEmpty() || !ariaElements.isEmpty()) {                currentTest.pass("Search has accessibility features");            } else if (!searchInputs.isEmpty()) {                currentTest.info("Search inputs present but accessibility could be improved");            } else {                currentTest.info("No search elements found for accessibility testing");            }            markTestPassed("Search accessibility test completed", currentTest);        } catch (Exception e) {            handleTestFailure(e, currentTest);        }    }    // ========== HELPER METHODS ==========    private ExtentTest initializeTest(String testName, String... categories) {        ExtentTest currentTest = getTest();        if (currentTest == null) {            currentTest = extent.createTest(testName);        }        currentTest.assignCategory(categories);        return currentTest;    }    // Note: The following methods are already available from BaseTest:    // - waitForPageLoad()    // - markTestPassed()    // - handleTestFailure()    // - logInfo() - use this instead of logTestInfo()}