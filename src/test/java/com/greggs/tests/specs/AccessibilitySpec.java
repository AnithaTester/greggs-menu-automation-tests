package com.greggs.tests.specs;import com.aventstack.extentreports.ExtentTest;import com.greggs.tests.BaseTest;import org.openqa.selenium.By;import org.openqa.selenium.WebElement;import org.testng.annotations.BeforeMethod;import org.testng.annotations.Test;import java.lang.reflect.Method;import java.util.List;@Test(groups = {"accessibility", "regression", "a11y"})public class AccessibilitySpec extends BaseTest {    @BeforeMethod    @Override    public void setUp(Method method) {        super.setUp(method);        // Now config should be initialized from BaseTest.setUp()    }    @Test(groups = {"accessibility", "smoke"})    public void testImageAltText() {        ExtentTest currentTest = initializeTest("testImageAltText", "accessibility", "smoke");        try {            logInfo("Testing image alt text for accessibility");            // Use the driver that's already initialized in BaseTest            // The page should already be navigated to the base URL from BaseTest.setUp()            List<WebElement> images = driver.findElements(By.tagName("img"));            List<WebElement> imagesWithAlt = driver.findElements(By.cssSelector("img[alt]"));            List<WebElement> imagesWithoutAlt = driver.findElements(By.cssSelector("img:not([alt])"));            logInfo("Total images: " + images.size());            logInfo("Images with alt text: " + imagesWithAlt.size());            logInfo("Images without alt text: " + imagesWithoutAlt.size());            if (!images.isEmpty()) {                if (imagesWithAlt.size() > 0) {                    currentTest.pass("Some images have alt text: " + imagesWithAlt.size() + "/" + images.size());                } else {                    currentTest.warning("No images have alt text - this affects accessibility");                }                if (imagesWithoutAlt.size() > 0) {                    currentTest.warning("Images missing alt text: " + imagesWithoutAlt.size() + " - consider adding alt attributes");                }            } else {                currentTest.info("No images found on page");            }            markTestPassed("Image alt text test completed", currentTest);        } catch (Exception e) {            handleTestFailure(e, currentTest);        }    }    @Test(groups = {"accessibility", "structure"})    public void testHeadingStructure() {        ExtentTest currentTest = initializeTest("testHeadingStructure", "accessibility", "structure");        try {            logInfo("Testing heading structure for accessibility");            List<WebElement> h1Elements = driver.findElements(By.tagName("h1"));            List<WebElement> h2Elements = driver.findElements(By.tagName("h2"));            List<WebElement> h3Elements = driver.findElements(By.tagName("h3"));            List<WebElement> allHeadings = driver.findElements(By.xpath("//h1|//h2|//h3|//h4|//h5|//h6"));            logInfo("H1 elements: " + h1Elements.size());            logInfo("H2 elements: " + h2Elements.size());            logInfo("H3 elements: " + h3Elements.size());            logInfo("Total headings: " + allHeadings.size());            // Check for proper heading structure            if (h1Elements.size() == 1) {                currentTest.pass("Good: Single H1 heading found");            } else if (h1Elements.size() > 1) {                currentTest.warning("Multiple H1 headings found: " + h1Elements.size() + " - consider using only one H1 per page");            } else {                currentTest.warning("No H1 heading found - this affects SEO and accessibility");            }            if (allHeadings.size() > 0) {                currentTest.pass("Page has heading structure with " + allHeadings.size() + " headings");            } else {                currentTest.warning("No headings found - consider adding heading structure for accessibility");            }            markTestPassed("Heading structure test completed", currentTest);        } catch (Exception e) {            handleTestFailure(e, currentTest);        }    }    @Test(groups = {"accessibility", "navigation"})    public void testKeyboardNavigation() {        ExtentTest currentTest = initializeTest("testKeyboardNavigation", "accessibility", "navigation");        try {            logInfo("Testing keyboard navigation accessibility");            List<WebElement> interactiveElements = driver.findElements(By.cssSelector(                    "a, button, input, select, textarea, [tabindex], [onclick]"            ));            List<WebElement> focusableElements = driver.findElements(By.cssSelector(                    "a[href], button, input, select, textarea, [tabindex]:not([tabindex='-1'])"            ));            logInfo("Interactive elements: " + interactiveElements.size());            logInfo("Focusable elements: " + focusableElements.size());            if (focusableElements.size() > 0) {                currentTest.pass("Page has " + focusableElements.size() + " keyboard-focusable elements");            } else {                currentTest.warning("No keyboard-focusable elements found - this affects keyboard navigation");            }            // Check for skip links            List<WebElement> skipLinks = driver.findElements(By.cssSelector(                    "a[href*='#main'], a[href*='#content'], [class*='skip'], [class*='sr-only']"            ));            if (!skipLinks.isEmpty()) {                currentTest.pass("Skip links found for keyboard navigation");            }            markTestPassed("Keyboard navigation test completed", currentTest);        } catch (Exception e) {            handleTestFailure(e, currentTest);        }    }    @Test(groups = {"accessibility", "forms"})    public void testFormLabels() {        ExtentTest currentTest = initializeTest("testFormLabels", "accessibility", "forms");        try {            logInfo("Testing form label accessibility");            List<WebElement> formInputs = driver.findElements(By.cssSelector(                    "input:not([type='hidden']), select, textarea"            ));            List<WebElement> labeledInputs = driver.findElements(By.cssSelector(                    "input:not([type='hidden'])[id], select[id], textarea[id]"            ));            List<WebElement> labels = driver.findElements(By.cssSelector("label[for]"));            logInfo("Form inputs: " + formInputs.size());            logInfo("Inputs with IDs: " + labeledInputs.size());            logInfo("Labels with for attributes: " + labels.size());            if (!formInputs.isEmpty()) {                if (labels.size() > 0) {                    currentTest.pass("Some form inputs have associated labels: " + labels.size() + "/" + formInputs.size());                } else {                    currentTest.warning("Form inputs missing labels - this affects accessibility");                }            } else {                currentTest.info("No form inputs found on page");            }            markTestPassed("Form labels test completed", currentTest);        } catch (Exception e) {            handleTestFailure(e, currentTest);        }    }    @Test(groups = {"accessibility", "contrast"})    public void testColorContrast() {        ExtentTest currentTest = initializeTest("testColorContrast", "accessibility", "contrast");        try {            logInfo("Testing color contrast accessibility indicators");            // Check for high contrast mode indicators            List<WebElement> highContrastElements = driver.findElements(By.cssSelector(                    "[class*='contrast'], [class*='high-contrast'], [data-contrast]"            ));            // Check for sufficient text size            List<WebElement> smallText = driver.findElements(By.cssSelector(                    "[style*='font-size:12px'], [style*='font-size:11px'], [style*='font-size:10px']"            ));            logInfo("High contrast elements: " + highContrastElements.size());            logInfo("Potentially small text elements: " + smallText.size());            if (!highContrastElements.isEmpty()) {                currentTest.pass("High contrast mode support detected");            } else {                currentTest.info("No specific high contrast mode detected - manual contrast testing recommended");            }            if (smallText.size() > 0) {                currentTest.warning(smallText.size() + " elements with potentially small text - check contrast ratios");            }            markTestPassed("Color contrast test completed", currentTest);        } catch (Exception e) {            handleTestFailure(e, currentTest);        }    }    @Test(groups = {"accessibility", "aria"})    public void testAriaAttributes() {        ExtentTest currentTest = initializeTest("testAriaAttributes", "accessibility", "aria");        try {            logInfo("Testing ARIA attributes for accessibility");            List<WebElement> ariaLabeled = driver.findElements(By.cssSelector("[aria-label]"));            List<WebElement> ariaDescribed = driver.findElements(By.cssSelector("[aria-describedby]"));            List<WebElement> ariaHidden = driver.findElements(By.cssSelector("[aria-hidden='true']"));            List<WebElement> roleAttributes = driver.findElements(By.cssSelector("[role]"));            logInfo("Elements with aria-label: " + ariaLabeled.size());            logInfo("Elements with aria-describedby: " + ariaDescribed.size());            logInfo("Elements with aria-hidden: " + ariaHidden.size());            logInfo("Elements with role attributes: " + roleAttributes.size());            if (roleAttributes.size() > 0) {                currentTest.pass("ARIA roles used: " + roleAttributes.size());            }            if (ariaLabeled.size() > 0) {                currentTest.pass("ARIA labels used: " + ariaLabeled.size());            }            if (ariaDescribed.size() > 0) {                currentTest.pass("ARIA descriptions used: " + ariaDescribed.size());            }            if (ariaLabeled.size() == 0 && ariaDescribed.size() == 0 && roleAttributes.size() == 0) {                currentTest.info("No ARIA attributes found - basic HTML semantics used");            }            markTestPassed("ARIA attributes test completed", currentTest);        } catch (Exception e) {            handleTestFailure(e, currentTest);        }    }    @Test(groups = {"accessibility", "semantic"})    public void testSemanticHTML() {        ExtentTest currentTest = initializeTest("testSemanticHTML", "accessibility", "semantic");        try {            logInfo("Testing semantic HTML elements");            List<WebElement> semanticElements = driver.findElements(By.cssSelector(                    "header, nav, main, section, article, aside, footer, figure, figcaption, time, mark"            ));            List<WebElement> landmarks = driver.findElements(By.cssSelector(                    "[role='banner'], [role='navigation'], [role='main'], [role='complementary'], [role='contentinfo']"            ));            logInfo("Semantic HTML elements: " + semanticElements.size());            logInfo("ARIA landmarks: " + landmarks.size());            if (semanticElements.size() > 0) {                currentTest.pass("Semantic HTML elements used: " + semanticElements.size());            } else {                currentTest.warning("No semantic HTML elements found - consider using header, nav, main, etc.");            }            if (landmarks.size() > 0) {                currentTest.pass("ARIA landmarks used: " + landmarks.size());            }            markTestPassed("Semantic HTML test completed", currentTest);        } catch (Exception e) {            handleTestFailure(e, currentTest);        }    }    @Test(groups = {"accessibility", "comprehensive"})    public void testComprehensiveAccessibilityAudit() {        ExtentTest currentTest = initializeTest("testComprehensiveAccessibilityAudit", "accessibility", "comprehensive");        try {            logInfo("Starting comprehensive accessibility audit");            // Run all accessibility checks            testImageAltText();            testHeadingStructure();            testKeyboardNavigation();            testFormLabels();            testColorContrast();            testAriaAttributes();            testSemanticHTML();            currentTest.pass("Comprehensive accessibility audit completed successfully");            markTestPassed("Comprehensive accessibility audit completed", currentTest);        } catch (Exception e) {            handleTestFailure(e, currentTest);        }    }    // ========== HELPER METHODS ==========    private ExtentTest initializeTest(String testName, String... categories) {        ExtentTest currentTest = getTest();        if (currentTest == null) {            currentTest = extent.createTest(testName);        }        currentTest.assignCategory(categories);        return currentTest;    }    // Note: The following methods are already available from BaseTest:    // - waitForPageLoad()    // - markTestPassed()    // - handleTestFailure()    // - logInfo()    // - navigateToHomePage() - but use the driver that's already set up in BaseTest}