package com.greggs.tests.specs;import com.aventstack.extentreports.ExtentTest;import com.greggs.pages.HomePage;import com.greggs.pages.MenuPage;import com.greggs.tests.BaseTest;import org.openqa.selenium.By;import org.testng.annotations.Test;import java.util.List;import java.util.Map;import static org.testng.Assert.assertFalse;import static org.testng.Assert.assertTrue;@Test(groups = {"data", "regression", "menu"})public class MenuDataSpec extends BaseTest {    @Test(description = "Verify menu page loads and contains food-related content", groups = {"data", "menu", "smoke"})    public void testMenuPageContent() {        ExtentTest currentTest = initializeTest("testMenuPageContent", "data", "menu", "smoke");        try {            logInfo("Starting comprehensive menu page content verification");            navigateToMenuPage();            // Get comprehensive page analysis            Map<String, Object> pageAnalysis = getMenuPageAnalysis(currentTest);            boolean isMenuLoaded = (Boolean) pageAnalysis.get("isMenuLoaded");            String pageTitle = (String) pageAnalysis.get("pageTitle");            String currentUrl = (String) pageAnalysis.get("currentUrl");            int textElementCount = (Integer) pageAnalysis.get("textElementCount");            boolean hasFoodContent = (Boolean) pageAnalysis.get("hasFoodContent");            // Enhanced page load verification            assertCondition(isMenuLoaded,                    "Menu page loaded successfully with title: " + pageTitle,                    "Menu page failed to load properly. Title: " + pageTitle + ", URL: " + currentUrl,                    currentTest);            // Content validation with detailed reporting            logInfo("Page Title: " + pageTitle);            logInfo("Current URL: " + currentUrl);            logInfo("Text elements found: " + textElementCount);            logInfo("Contains food content: " + hasFoodContent);            // Enhanced content assertions            assertCondition(textElementCount > 10,                    "Page has substantial content with " + textElementCount + " text elements",                    "Page content seems limited with only " + textElementCount + " text elements",                    currentTest);            assertCondition(hasFoodContent,                    "Menu page contains food-related content",                    "Menu page should contain food-related content. Check page structure and content.",                    currentTest);            // Additional content quality checks            performContentQualityChecks(currentTest);            markTestPassed("Menu page content test PASSED - Comprehensive content verification completed", currentTest);        } catch (Exception e) {            handleTestFailure(e, currentTest);        }    }    @Test(description = "Verify menu contains food items or categories", groups = {"data", "menu", "content", "validation"})    public void testMenuFoodContent() {        ExtentTest currentTest = initializeTest("testMenuFoodContent", "data", "menu", "content", "validation");        try {            logInfo("Starting detailed menu food content analysis");            navigateToMenuPage();            // Get comprehensive food content analysis            Map<String, Object> foodAnalysis = getFoodContentAnalysis(currentTest);            List<String> foodCategories = (List<String>) foodAnalysis.get("foodCategories");            List<String> itemNames = (List<String>) foodAnalysis.get("itemNames");            List<String> foodKeywords = (List<String>) foodAnalysis.get("foodKeywords");            boolean hasFoodCategories = (Boolean) foodAnalysis.get("hasFoodCategories");            boolean hasMenuItems = (Boolean) foodAnalysis.get("hasMenuItems");            int totalFoodElements = (Integer) foodAnalysis.get("totalFoodElements");            // Log detailed food analysis            logInfo("Food categories found: " + foodCategories.size());            logInfo("Menu items found: " + itemNames.size());            logInfo("Food keywords detected: " + foodKeywords.size());            logInfo("Total food-related elements: " + totalFoodElements);            // Enhanced food content validation            if (hasFoodCategories || hasMenuItems) {                currentTest.pass("SUCCESS: Menu contains food content - " +                        "Categories: " + foodCategories.size() +                        ", Items: " + itemNames.size() +                        ", Keywords: " + foodKeywords.size());                // Log specific findings                if (!foodCategories.isEmpty()) {                    currentTest.pass("Food categories identified: " +                            String.join(", ", foodCategories.subList(0, Math.min(5, foodCategories.size()))) +                            (foodCategories.size() > 5 ? " and " + (foodCategories.size() - 5) + " more..." : ""));                }                if (!itemNames.isEmpty()) {                    currentTest.pass("Sample menu items: " +                            String.join(", ", itemNames.subList(0, Math.min(5, itemNames.size()))) +                            (itemNames.size() > 5 ? " and " + (itemNames.size() - 5) + " more..." : ""));                }                if (!foodKeywords.isEmpty()) {                    currentTest.info("Food-related keywords found: " +                            String.join(", ", foodKeywords.subList(0, Math.min(10, foodKeywords.size()))));                }            } else {                currentTest.fail("CRITICAL: No food categories or menu items found");                // Provide detailed failure analysis                performFailureAnalysis(currentTest);                throw new AssertionError("Menu should contain food content. Analysis: " +                        "Categories=" + foodCategories.size() +                        ", Items=" + itemNames.size() +                        ", Keywords=" + foodKeywords.size());            }            // Quality metrics            if (totalFoodElements >= 10) {                currentTest.pass("EXCELLENT: Rich food content with " + totalFoodElements + " elements");            } else if (totalFoodElements >= 5) {                currentTest.pass("GOOD: Adequate food content with " + totalFoodElements + " elements");            } else {                currentTest.warning("LIMITED: Minimal food content with only " + totalFoodElements + " elements");            }            markTestPassed("Menu food content test PASSED - Comprehensive food analysis completed", currentTest);        } catch (Exception e) {            handleTestFailure(e, currentTest);        }    }    @Test(description = "Verify menu items have names and reasonable count", groups = {"data", "menu", "validation", "quality"})    public void testMenuItemPresence() {        ExtentTest currentTest = initializeTest("testMenuItemPresence", "data", "menu", "validation", "quality");        try {            logInfo("Starting comprehensive menu item validation");            navigateToMenuPage();            MenuPage menuPage = new MenuPage(driver);            List<String> itemNames = menuPage.getItemNames();            List<String> allText = menuPage.getAllPageText();            logInfo("Menu items found: " + itemNames.size());            logInfo("Total page text elements: " + allText.size());            // Enhanced item validation            if (itemNames.isEmpty()) {                currentTest.info("No specific menu items found on main page - analyzing page content");                // Comprehensive content analysis                performContentAnalysis(allText, currentTest);                // Soft assertion for basic content                assertTrue(allText.size() > 5,                        "Should have reasonable content on menu page. Found: " + allText.size() + " elements");            } else {                // Detailed item analysis                performItemAnalysis(itemNames, currentTest);                // Quality metrics                int validItemCount = getValidItemCount(itemNames);                double qualityScore = (double) validItemCount / itemNames.size();                logInfo("Menu item quality score: " + String.format("%.1f%%", qualityScore * 100));                if (qualityScore >= 0.9) {                    currentTest.pass("EXCELLENT: High-quality menu items (" + String.format("%.1f%%", qualityScore * 100) + " valid)");                } else if (qualityScore >= 0.7) {                    currentTest.pass("GOOD: Good-quality menu items (" + String.format("%.1f%%", qualityScore * 100) + " valid)");                } else {                    currentTest.warning("NEEDS IMPROVEMENT: Menu item quality could be better (" +                            String.format("%.1f%%", qualityScore * 100) + " valid)");                }            }            markTestPassed("Menu item presence test COMPLETED - Comprehensive validation performed", currentTest);        } catch (Exception e) {            handleTestFailure(e, currentTest);        }    }    @Test(description = "Verify menu navigation works correctly", groups = {"data", "navigation", "functionality"})    public void testMenuNavigation() {        ExtentTest currentTest = initializeTest("testMenuNavigation", "data", "navigation", "functionality");        try {            logInfo("Starting comprehensive menu navigation testing");            String originalUrl = driver.getCurrentUrl();            logInfo("Starting URL: " + originalUrl);            HomePage homePage = new HomePage(driver);            MenuPage menuPage = homePage.navigateToMenu();            waitForPageLoad(3000);            String newUrl = driver.getCurrentUrl();            boolean menuLoaded = menuPage.isMenuPageLoaded();            logInfo("Navigation completed - New URL: " + newUrl);            logInfo("Menu page loaded: " + menuLoaded);            // Enhanced navigation validation            boolean urlChanged = !originalUrl.equals(newUrl);            boolean urlContainsMenu = newUrl.toLowerCase().contains("menu");            boolean titleContainsMenu = menuPage.getPageTitle().toLowerCase().contains("menu");            currentTest.info("URL changed: " + urlChanged);            currentTest.info("URL contains 'menu': " + urlContainsMenu);            currentTest.info("Title contains 'menu': " + titleContainsMenu);            // Multiple success criteria            int successCriteriaMet = 0;            if (urlChanged) successCriteriaMet++;            if (menuLoaded) successCriteriaMet++;            if (urlContainsMenu) successCriteriaMet++;            if (titleContainsMenu) successCriteriaMet++;            logInfo("Navigation success criteria met: " + successCriteriaMet + "/4");            if (successCriteriaMet >= 2) {                currentTest.pass("SUCCESS: Menu navigation completed with " + successCriteriaMet + "/4 success criteria");                if (urlChanged) currentTest.pass("URL successfully changed during navigation");                if (menuLoaded) currentTest.pass("Menu page content loaded properly");                if (urlContainsMenu) currentTest.pass("URL indicates menu section");                if (titleContainsMenu) currentTest.pass("Page title indicates menu content");            } else {                currentTest.fail("FAILED: Menu navigation issues - only " + successCriteriaMet + "/4 criteria met");                throw new AssertionError("Menu navigation failed. Success criteria: " + successCriteriaMet + "/4");            }            // Additional navigation quality checks            performNavigationQualityChecks(currentTest);            markTestPassed("Menu navigation test PASSED - Comprehensive navigation validation completed", currentTest);        } catch (Exception e) {            handleTestFailure(e, currentTest);        }    }    @Test(description = "Verify images load on menu page", groups = {"data", "images", "content"})    public void testMenuImages() {        ExtentTest currentTest = initializeTest("testMenuImages", "data", "images", "content");        try {            logInfo("Starting comprehensive menu images analysis");            navigateToMenuPage();            MenuPage menuPage = new MenuPage(driver);            boolean imagesLoaded = menuPage.areAllImagesLoaded();            int totalImages = driver.findElements(By.tagName("img")).size();            int brokenImages = getBrokenImageCount();            logInfo("Images loaded successfully: " + imagesLoaded);            logInfo("Total images found: " + totalImages);            logInfo("Broken images detected: " + brokenImages);            // Enhanced image analysis            if (totalImages == 0) {                currentTest.info("No images present on menu page - this might be normal for the current design");                // Check for other media elements                checkAlternativeMedia(currentTest);            } else if (imagesLoaded && brokenImages == 0) {                currentTest.pass("EXCELLENT: All " + totalImages + " images loaded successfully");                // Check image attributes for accessibility                checkImageAccessibility(currentTest);            } else {                currentTest.warning("Image loading issues: " + brokenImages + " broken images out of " + totalImages);                if (brokenImages > 0) {                    currentTest.info("Some images may not be loading properly");                }                // Check if basic image functionality exists                if (totalImages > 0 && brokenImages < totalImages) {                    currentTest.pass("Partial image loading: " + (totalImages - brokenImages) + "/" + totalImages + " images working");                }            }            // Performance check            checkImagePerformance(currentTest);            markTestPassed("Menu images test COMPLETED - Comprehensive image analysis performed", currentTest);        } catch (Exception e) {            handleTestFailure(e, currentTest);        }    }    @Test(description = "Verify menu structure and organization", groups = {"data", "menu", "structure"})    public void testMenuStructure() {        ExtentTest currentTest = initializeTest("testMenuStructure", "data", "menu", "structure");        try {            logInfo("Starting menu structure analysis");            navigateToMenuPage();            // Analyze menu structure            Map<String, Object> structureAnalysis = analyzeMenuStructure(currentTest);            boolean hasCategories = (Boolean) structureAnalysis.get("hasCategories");            boolean hasSections = (Boolean) structureAnalysis.get("hasSections");            long categoryCount = (Long) structureAnalysis.get("categoryCount");            int sectionCount = (Integer) structureAnalysis.get("sectionCount");            logInfo("Has categories: " + hasCategories);            logInfo("Has sections: " + hasSections);            logInfo("Category count: " + categoryCount);            logInfo("Section count: " + sectionCount);            // Structure validation            if (hasCategories || hasSections) {                currentTest.pass("GOOD: Menu has organized structure");                if (hasCategories) {                    currentTest.pass("Menu organized into " + categoryCount + " categories");                }                if (hasSections) {                    currentTest.pass("Menu divided into " + sectionCount + " sections");                }                // Check structure quality                if (categoryCount >= 3 || sectionCount >= 3) {                    currentTest.pass("WELL-ORGANIZED: Comprehensive menu structure");                }            } else {                currentTest.warning("Menu structure could be improved - consider adding categories or sections");                // Check for basic list structure                checkListStructure(currentTest);            }            markTestPassed("Menu structure test COMPLETED", currentTest);        } catch (Exception e) {            handleTestFailure(e, currentTest);        }    }    @Test(description = "Verify menu performance and loading times", groups = {"data", "menu", "performance"})    public void testMenuPerformance() {        ExtentTest currentTest = initializeTest("testMenuPerformance", "data", "menu", "performance");        try {            logInfo("Starting menu performance analysis");            // Measure initial load time            long startTime = System.currentTimeMillis();            navigateToMenuPage();            long loadTime = System.currentTimeMillis() - startTime;            logInfo("Menu page load time: " + loadTime + "ms");            // Performance thresholds            if (loadTime < 3000) {                currentTest.pass("EXCELLENT: Fast menu loading (" + loadTime + "ms)");            } else if (loadTime < 5000) {                currentTest.pass("GOOD: Reasonable menu loading (" + loadTime + "ms)");            } else if (loadTime < 10000) {                currentTest.warning("SLOW: Menu loading took " + loadTime + "ms - consider optimization");            } else {                currentTest.fail("VERY SLOW: Menu loading took " + loadTime + "ms - needs optimization");            }            // Additional performance metrics            checkResourceLoading(currentTest);            checkRenderingPerformance(currentTest);            markTestPassed("Menu performance test COMPLETED", currentTest);        } catch (Exception e) {            handleTestFailure(e, currentTest);        }    }    // ========== ENHANCED HELPER METHODS ==========    private ExtentTest initializeTest(String testName, String... categories) {        ExtentTest currentTest = getTest();        if (currentTest == null) {            currentTest = extent.createTest(testName);        }        currentTest.assignCategory(categories);        return currentTest;    }    private Map<String, Object> getMenuPageAnalysis(ExtentTest currentTest) {        MenuPage menuPage = new MenuPage(driver);        @SuppressWarnings("unchecked")        Map<String, Object> analysis = (Map<String, Object>) ((org.openqa.selenium.JavascriptExecutor) driver).executeScript(                "var analysis = {}; " +                        "analysis.isMenuLoaded = document.readyState === 'complete'; " +                        "analysis.pageTitle = document.title || ''; " +                        "analysis.currentUrl = window.location.href || ''; " +                        "analysis.textElementCount = document.querySelectorAll('p, span, div, h1, h2, h3, h4, h5, h6, a, li, td, th').length; " +                        "analysis.hasFoodContent = document.body.innerText.toLowerCase().includes('menu') || " +                        "                         document.body.innerText.toLowerCase().includes('food') || " +                        "                         document.body.innerText.toLowerCase().includes('eat') || " +                        "                         document.body.innerText.toLowerCase().includes('bakery') || " +                        "                         document.body.innerText.toLowerCase().includes('sandwich'); " +                        "return analysis;"        );        // Add additional checks        analysis.put("isMenuLoaded", menuPage.isMenuPageLoaded());        return analysis;    }    private Map<String, Object> getFoodContentAnalysis(ExtentTest currentTest) {        MenuPage menuPage = new MenuPage(driver);        @SuppressWarnings("unchecked")        Map<String, Object> analysis = (Map<String, Object>) ((org.openqa.selenium.JavascriptExecutor) driver).executeScript(                "var foodKeywords = ['sausage', 'roll', 'sandwich', 'pastry', 'cake', 'bread', 'coffee', 'tea', 'drink', 'snack', 'meal', 'breakfast', 'lunch', 'dinner', 'bakery', 'fresh', 'hot', 'cold', 'vegetarian', 'vegan', 'gluten', 'dairy', 'allergen']; " +                        "var pageText = document.body.innerText.toLowerCase(); " +                        "var foundKeywords = foodKeywords.filter(keyword => pageText.includes(keyword)); " +                        "return { " +                        "  foodKeywords: foundKeywords, " +                        "  totalFoodElements: document.querySelectorAll('[class*=\"food\"], [class*=\"menu\"], [class*=\"item\"], [class*=\"product\"], [class*=\"categor\"]').length " +                        "};"        );        analysis.put("foodCategories", menuPage.getActualFoodCategories());        analysis.put("itemNames", menuPage.getItemNames());        analysis.put("hasFoodCategories", !((List<?>) analysis.get("foodCategories")).isEmpty());        analysis.put("hasMenuItems", !((List<?>) analysis.get("itemNames")).isEmpty());        return analysis;    }    private void performContentQualityChecks(ExtentTest currentTest) {        try {            MenuPage menuPage = new MenuPage(driver);            List<String> allText = menuPage.getAllPageText();            // Check for meaningful content            int meaningfulElements = 0;            for (String text : allText) {                if (text.trim().length() > 10) { // Reasonable length for meaningful content                    meaningfulElements++;                }            }            double meaningfulRatio = (double) meaningfulElements / allText.size();            currentTest.info("Meaningful content ratio: " + String.format("%.1f%%", meaningfulRatio * 100));            if (meaningfulRatio > 0.7) {                currentTest.pass("HIGH QUALITY: Good content density");            }        } catch (Exception e) {            currentTest.info("Content quality analysis incomplete: " + e.getMessage());        }    }    private void performContentAnalysis(List<String> allText, ExtentTest currentTest) {        if (!allText.isEmpty()) {            StringBuilder contentPreview = new StringBuilder("Page content sample (first 15 elements):\n");            allText.stream()                    .limit(15)                    .forEach(text -> contentPreview.append("• ").append(text).append("\n"));            currentTest.info(contentPreview.toString());            // Check for food-related content in all text            long foodRelatedCount = allText.stream()                    .filter(text -> text.toLowerCase().matches(".*\\b(sausage|roll|sandwich|pastry|cake|bread|coffee|tea|menu|food|eat)\\b.*"))                    .count();            if (foodRelatedCount > 0) {                currentTest.pass("Found " + foodRelatedCount + " food-related text elements");            }        }    }    private void performItemAnalysis(List<String> itemNames, ExtentTest currentTest) {        // Log detailed item information        StringBuilder itemsList = new StringBuilder("Menu items analysis:\n");        itemNames.stream()                .limit(10)                .forEach(item -> itemsList.append("• ").append(item).append(" (length: ").append(item.length()).append(")\n"));        if (itemNames.size() > 10) {            itemsList.append("... and ").append(itemNames.size() - 10).append(" more items");        }        currentTest.info(itemsList.toString());        // Validate item names        int emptyItemCount = 0;        int shortItemCount = 0; // Items with very short names        for (String itemName : itemNames) {            if (itemName.trim().isEmpty()) {                emptyItemCount++;            } else if (itemName.trim().length() < 3) {                shortItemCount++;            }        }        if (emptyItemCount == 0) {            currentTest.pass("All " + itemNames.size() + " menu items have non-empty names");        } else {            currentTest.warning(emptyItemCount + " out of " + itemNames.size() + " menu items have empty names");        }        if (shortItemCount > 0) {            currentTest.info(shortItemCount + " items have very short names (less than 3 characters)");        }        // Verify no empty item names        for (String itemName : itemNames) {            assertFalse(itemName.trim().isEmpty(),                    "Menu item name should not be empty. Found empty item in: " + itemNames);        }    }    private int getValidItemCount(List<String> itemNames) {        return (int) itemNames.stream()                .filter(item -> !item.trim().isEmpty() && item.trim().length() >= 2)                .count();    }    private int getBrokenImageCount() {        try {            Long result = (Long) ((org.openqa.selenium.JavascriptExecutor) driver).executeScript(                    "var images = document.getElementsByTagName('img'); " +                            "var brokenCount = 0; " +                            "for (var i = 0; i < images.length; i++) { " +                            "  if (images[i].naturalWidth === 0 || images[i].complete === false) { " +                            "    brokenCount++; " +                            "  } " +                            "} " +                            "return brokenCount;"            );            return result != null ? result.intValue() : 0;        } catch (Exception e) {            return 0;        }    }    private void checkImageAccessibility(ExtentTest currentTest) {        try {            Long imagesWithAlt = (Long) ((org.openqa.selenium.JavascriptExecutor) driver).executeScript(                    "var images = document.getElementsByTagName('img'); " +                            "var count = 0; " +                            "for (var i = 0; i < images.length; i++) { " +                            "  if (images[i].alt && images[i].alt.trim() !== '') { " +                            "    count++; " +                            "  } " +                            "} " +                            "return count;"            );            if (imagesWithAlt != null && imagesWithAlt > 0) {                currentTest.pass("Accessibility: " + imagesWithAlt + " images have alt text");            }        } catch (Exception e) {            currentTest.info("Image accessibility check incomplete");        }    }    private void checkAlternativeMedia(ExtentTest currentTest) {        try {            int svgCount = driver.findElements(By.tagName("svg")).size();            int canvasCount = driver.findElements(By.tagName("canvas")).size();            int videoCount = driver.findElements(By.tagName("video")).size();            if (svgCount > 0 || canvasCount > 0 || videoCount > 0) {                currentTest.info("Alternative media found - SVG: " + svgCount + ", Canvas: " + canvasCount + ", Video: " + videoCount);            }        } catch (Exception e) {            currentTest.info("Alternative media check incomplete");        }    }    private void checkImagePerformance(ExtentTest currentTest) {        try {            Long totalImageSize = (Long) ((org.openqa.selenium.JavascriptExecutor) driver).executeScript(                    "var images = document.getElementsByTagName('img'); " +                            "var totalSize = 0; " +                            "for (var i = 0; i < images.length; i++) { " +                            "  var src = images[i].src; " +                            "  if (src && src.startsWith('http')) { " +                            "    totalSize += 100; // Approximate average size in KB " +                            "  } " +                            "} " +                            "return totalSize;"            );            if (totalImageSize != null) {                currentTest.info("Estimated total image size: ~" + totalImageSize + "KB");            }        } catch (Exception e) {            currentTest.info("Image performance analysis incomplete");        }    }    private Map<String, Object> analyzeMenuStructure(ExtentTest currentTest) {        @SuppressWarnings("unchecked")        Map<String, Object> analysis = (Map<String, Object>) ((org.openqa.selenium.JavascriptExecutor) driver).executeScript(                "var categories = document.querySelectorAll('[class*=\"category\"], [class*=\"categor\"], [class*=\"type\"], [class*=\"group\"]'); " +                        "var sections = document.querySelectorAll('section, [class*=\"section\"], [class*=\"menu-\"], [class*=\"product-\"]'); " +                        "return { " +                        "  hasCategories: categories.length > 0, " +                        "  hasSections: sections.length > 0, " +                        "  categoryCount: categories.length, " +                        "  sectionCount: sections.length " +                        "};"        );        return analysis;    }    private void checkListStructure(ExtentTest currentTest) {        try {            int listCount = driver.findElements(By.tagName("ul")).size() +                    driver.findElements(By.tagName("ol")).size();            if (listCount > 0) {                currentTest.info("Found " + listCount + " list structures - basic organization present");            }        } catch (Exception e) {            currentTest.info("List structure check incomplete");        }    }    private void checkResourceLoading(ExtentTest currentTest) {        try {            Long resourceCount = (Long) ((org.openqa.selenium.JavascriptExecutor) driver).executeScript(                    "return window.performance.getEntriesByType('resource').length;"            );            currentTest.info("Total resources loaded: " + resourceCount);        } catch (Exception e) {            currentTest.info("Resource loading analysis unavailable");        }    }    private void checkRenderingPerformance(ExtentTest currentTest) {        try {            Object loadTime = ((org.openqa.selenium.JavascriptExecutor) driver).executeScript(                    "return window.performance.timing.loadEventEnd - window.performance.timing.navigationStart;"            );            if (loadTime instanceof Long) {                currentTest.info("Browser-reported load time: " + loadTime + "ms");            }        } catch (Exception e) {            currentTest.info("Rendering performance analysis unavailable");        }    }    private void performFailureAnalysis(ExtentTest currentTest) {        try {            MenuPage menuPage = new MenuPage(driver);            List<String> allText = menuPage.getAllPageText();            currentTest.info("Failure analysis - Total text elements: " + allText.size());            if (!allText.isEmpty()) {                currentTest.info("Sample content: " +                        String.join(" | ", allText.subList(0, Math.min(5, allText.size()))));            }        } catch (Exception e) {            currentTest.info("Failure analysis incomplete");        }    }    private void performNavigationQualityChecks(ExtentTest currentTest) {        try {            // Check for breadcrumbs or navigation indicators            boolean hasBreadcrumbs = !driver.findElements(By.cssSelector("[class*='breadcrumb'], [aria-label*='breadcrumb']")).isEmpty();            if (hasBreadcrumbs) {                currentTest.pass("Breadcrumb navigation present");            }            // Check page title relevance            String pageTitle = driver.getTitle();            if (pageTitle != null && pageTitle.toLowerCase().contains("menu")) {                currentTest.pass("Page title clearly indicates menu content");            }        } catch (Exception e) {            currentTest.info("Navigation quality checks incomplete");        }    }}