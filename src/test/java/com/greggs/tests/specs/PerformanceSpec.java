package com.greggs.tests.specs;import com.aventstack.extentreports.ExtentTest;import com.greggs.pages.HomePage;import com.greggs.pages.MenuPage;import com.greggs.tests.BaseTest;import org.testng.annotations.Test;import java.util.Map;import static org.testng.Assert.assertTrue;@Test(groups = {"performance", "regression", "speed"})public class PerformanceSpec extends BaseTest {    @Test(description = "Verify page load performance meets requirements", groups = {"performance", "speed", "smoke"})    public void testPageLoadPerformance() {        ExtentTest currentTest = initializeTest("testPageLoadPerformance", "performance", "speed", "smoke");        try {            logInfo("Starting comprehensive page load performance analysis");            // Test multiple page loads for consistency            int iterations = 3;            long totalLoadTime = 0;            long minLoadTime = Long.MAX_VALUE;            long maxLoadTime = 0;            for (int i = 0; i < iterations; i++) {                logInfo("Performance iteration " + (i + 1) + " of " + iterations);                long startTime = System.currentTimeMillis();                navigateToHomePage();                long loadTime = System.currentTimeMillis() - startTime;                totalLoadTime += loadTime;                minLoadTime = Math.min(minLoadTime, loadTime);                maxLoadTime = Math.max(maxLoadTime, loadTime);                logInfo("Iteration " + (i + 1) + " load time: " + loadTime + "ms");                // Brief pause between iterations                waitForPageLoad(1000);            }            long averageLoadTime = totalLoadTime / iterations;            logInfo("Performance summary - Average: " + averageLoadTime + "ms, Min: " +                    minLoadTime + "ms, Max: " + maxLoadTime + "ms");            // Performance assertions            if (averageLoadTime < 3000) {                currentTest.pass("EXCELLENT: Fast page loading (" + averageLoadTime + "ms average)");            } else if (averageLoadTime < 5000) {                currentTest.pass("GOOD: Reasonable page loading (" + averageLoadTime + "ms average)");            } else if (averageLoadTime < 8000) {                currentTest.warning("ACCEPTABLE: Page loading acceptable but could be improved (" +                        averageLoadTime + "ms average)");            } else {                currentTest.fail("SLOW: Page loading performance needs improvement (" +                        averageLoadTime + "ms average)");                throw new AssertionError("Page load performance below acceptable threshold: " +                        averageLoadTime + "ms");            }            // Consistency check            long loadTimeRange = maxLoadTime - minLoadTime;            if (loadTimeRange < 1000) {                currentTest.pass("CONSISTENT: Stable load times (range: " + loadTimeRange + "ms)");            } else {                currentTest.info("VARIABLE: Load times show some variation (range: " + loadTimeRange + "ms)");            }            markTestPassed("Page load performance test COMPLETED", currentTest);        } catch (Exception e) {            handleTestFailure(e, currentTest);        }    }    @Test(description = "Verify menu page navigation performance", groups = {"performance", "navigation", "speed"})    public void testMenuNavigationPerformance() {        ExtentTest currentTest = initializeTest("testMenuNavigationPerformance", "performance", "navigation", "speed");        try {            logInfo("Starting menu navigation performance analysis");            // Measure navigation from homepage to menu            long startTime = System.currentTimeMillis();            HomePage homePage = new HomePage(driver);            homePage.navigateToMenu();            long navigationTime = System.currentTimeMillis() - startTime;            logInfo("Menu navigation time: " + navigationTime + "ms");            // Performance thresholds for navigation            if (navigationTime < 2000) {                currentTest.pass("EXCELLENT: Fast menu navigation (" + navigationTime + "ms)");            } else if (navigationTime < 4000) {                currentTest.pass("GOOD: Reasonable menu navigation (" + navigationTime + "ms)");            } else if (navigationTime < 6000) {                currentTest.warning("ACCEPTABLE: Menu navigation acceptable (" + navigationTime + "ms)");            } else {                currentTest.warning("SLOW: Menu navigation could be improved (" + navigationTime + "ms)");            }            // Verify menu loaded successfully            MenuPage menuPage = new MenuPage(driver);            boolean menuLoaded = menuPage.isMenuPageLoaded();            assertTrue(menuLoaded, "Menu page should load successfully after navigation");            currentTest.pass("Menu content loaded successfully after navigation");            markTestPassed("Menu navigation performance test COMPLETED", currentTest);        } catch (Exception e) {            handleTestFailure(e, currentTest);        }    }    @Test(description = "Verify resource loading efficiency", groups = {"performance", "resources", "optimization"})    public void testResourceLoadingPerformance() {        ExtentTest currentTest = initializeTest("testResourceLoadingPerformance", "performance", "resources", "optimization");        try {            logInfo("Starting resource loading performance analysis");            navigateToHomePage();            // Analyze resource loading            Map<String, Object> resourceAnalysis = analyzeResourceLoading(currentTest);            // Fix: Handle Number types properly (JavaScript returns Long/Double)            Number totalResourcesNumber = (Number) resourceAnalysis.get("totalResources");            Number estimatedTotalSizeNumber = (Number) resourceAnalysis.get("estimatedTotalSize");            int totalResources = totalResourcesNumber != null ? totalResourcesNumber.intValue() : 0;            long estimatedTotalSize = estimatedTotalSizeNumber != null ? estimatedTotalSizeNumber.longValue() : 0;            logInfo("Total resources loaded: " + totalResources);            logInfo("Estimated total size: ~" + estimatedTotalSize + "KB");            // Resource efficiency analysis            if (totalResources < 50) {                currentTest.pass("EFFICIENT: Reasonable number of resources (" + totalResources + ")");            } else if (totalResources < 100) {                currentTest.pass("MODERATE: Acceptable resource count (" + totalResources + ")");            } else {                currentTest.warning("HEAVY: High number of resources (" + totalResources + ") - consider optimization");            }            // Size efficiency            if (estimatedTotalSize < 2000) {                currentTest.pass("OPTIMIZED: Good resource size efficiency (~" + estimatedTotalSize + "KB)");            } else if (estimatedTotalSize < 5000) {                currentTest.pass("REASONABLE: Acceptable resource size (~" + estimatedTotalSize + "KB)");            } else {                currentTest.warning("LARGE: Significant resource size (~" + estimatedTotalSize + "KB) - consider optimization");            }            // Check for potential optimizations            checkOptimizationOpportunities(currentTest);            markTestPassed("Resource loading performance test COMPLETED", currentTest);        } catch (Exception e) {            handleTestFailure(e, currentTest);        }    }    @Test(description = "Verify rendering performance and smoothness", groups = {"performance", "rendering", "ux"})    public void testRenderingPerformance() {        ExtentTest currentTest = initializeTest("testRenderingPerformance", "performance", "rendering", "ux");        try {            logInfo("Starting rendering performance analysis");            navigateToHomePage();            // Measure rendering performance            Map<String, Object> renderingMetrics = getRenderingMetrics(currentTest);            // Fix: Handle Number types properly            Number domContentLoadedNumber = (Number) renderingMetrics.get("domContentLoaded");            Number loadEventEndNumber = (Number) renderingMetrics.get("loadEventEnd");            Number firstPaintNumber = (Number) renderingMetrics.get("firstPaint");            long domContentLoaded = domContentLoadedNumber != null ? domContentLoadedNumber.longValue() : 0;            long loadEventEnd = loadEventEndNumber != null ? loadEventEndNumber.longValue() : 0;            long firstPaint = firstPaintNumber != null ? firstPaintNumber.longValue() : 0;            logInfo("DOM Content Loaded: " + domContentLoaded + "ms");            logInfo("Load Event End: " + loadEventEnd + "ms");            logInfo("First Paint: " + firstPaint + "ms");            // Rendering performance analysis            if (firstPaint < 1000) {                currentTest.pass("EXCELLENT: Fast initial rendering (" + firstPaint + "ms)");            } else if (firstPaint < 2000) {                currentTest.pass("GOOD: Reasonable initial rendering (" + firstPaint + "ms)");            } else {                currentTest.warning("SLOW: Initial rendering could be improved (" + firstPaint + "ms)");            }            if (domContentLoaded < 2000) {                currentTest.pass("QUICK: Fast DOM content loading (" + domContentLoaded + "ms)");            }            if (loadEventEnd - domContentLoaded < 1000) {                currentTest.pass("EFFICIENT: Quick resource processing after DOM ready");            }            markTestPassed("Rendering performance test COMPLETED", currentTest);        } catch (Exception e) {            handleTestFailure(e, currentTest);        }    }    @Test(description = "Verify performance under simulated load", groups = {"performance", "stress", "reliability"})    public void testPerformanceUnderLoad() {        ExtentTest currentTest = initializeTest("testPerformanceUnderLoad", "performance", "stress", "reliability");        try {            logInfo("Starting performance under load analysis");            // Simulate multiple rapid navigations            int rapidNavigations = 5;            long totalRapidTime = 0;            for (int i = 0; i < rapidNavigations; i++) {                logInfo("Rapid navigation " + (i + 1) + " of " + rapidNavigations);                long startTime = System.currentTimeMillis();                navigateToHomePage();                long navigationTime = System.currentTimeMillis() - startTime;                totalRapidTime += navigationTime;                logInfo("Rapid navigation " + (i + 1) + " time: " + navigationTime + "ms");                // Very brief pause to simulate rapid usage                waitForPageLoad(500);            }            long averageRapidTime = totalRapidTime / rapidNavigations;            logInfo("Average rapid navigation time: " + averageRapidTime + "ms");            // Stress test validation            if (averageRapidTime < 4000) {                currentTest.pass("RESILIENT: Good performance under load (" + averageRapidTime + "ms average)");            } else if (averageRapidTime < 7000) {                currentTest.pass("STABLE: Acceptable performance under load (" + averageRapidTime + "ms average)");            } else {                currentTest.warning("STRESSED: Performance degrades under load (" + averageRapidTime + "ms average)");            }            markTestPassed("Performance under load test COMPLETED", currentTest);        } catch (Exception e) {            handleTestFailure(e, currentTest);        }    }    // ========== HELPER METHODS ==========    private ExtentTest initializeTest(String testName, String... categories) {        ExtentTest currentTest = getTest();        if (currentTest == null) {            currentTest = extent.createTest(testName);        }        currentTest.assignCategory(categories);        return currentTest;    }    private Map<String, Object> analyzeResourceLoading(ExtentTest currentTest) {        @SuppressWarnings("unchecked")        Map<String, Object> analysis = (Map<String, Object>) ((org.openqa.selenium.JavascriptExecutor) driver).executeScript(                "var resources = window.performance.getEntriesByType('resource'); " +                        "var totalSize = 0; " +                        "resources.forEach(function(resource) { " +                        "  totalSize += resource.transferSize || 1024; " + // Fallback to 1KB if size not available                        "}); " +                        "return { " +                        "  totalResources: resources.length, " +                        "  estimatedTotalSize: Math.round(totalSize / 1024) " + // Convert to KB                        "};"        );        return analysis;    }    private Map<String, Object> getRenderingMetrics(ExtentTest currentTest) {        @SuppressWarnings("unchecked")        Map<String, Object> metrics = (Map<String, Object>) ((org.openqa.selenium.JavascriptExecutor) driver).executeScript(                "var perf = window.performance.timing; " +                        "var paint = performance.getEntriesByType('paint'); " +                        "return { " +                        "  domContentLoaded: perf.domContentLoadedEventEnd - perf.navigationStart, " +                        "  loadEventEnd: perf.loadEventEnd - perf.navigationStart, " +                        "  firstPaint: paint.find(entry => entry.name === 'first-paint') ? " +                        "             paint.find(entry => entry.name === 'first-paint').startTime : 0 " +                        "};"        );        return metrics;    }    private void checkOptimizationOpportunities(ExtentTest currentTest) {        try {            // Check for large images - handle Number type            Number largeImagesNumber = (Number) ((org.openqa.selenium.JavascriptExecutor) driver).executeScript(                    "var images = document.getElementsByTagName('img'); " +                            "var largeCount = 0; " +                            "for (var i = 0; i < images.length; i++) { " +                            "  if (images[i].naturalWidth > 1000 || images[i].naturalHeight > 1000) { " +                            "    largeCount++; " +                            "  } " +                            "} " +                            "return largeCount;"            );            long largeImages = largeImagesNumber != null ? largeImagesNumber.longValue() : 0;            if (largeImages > 0) {                currentTest.info("Found " + largeImages + " potentially large images - consider optimization");            }            // Check for unused resources - handle Number type            Number hiddenElementsNumber = (Number) ((org.openqa.selenium.JavascriptExecutor) driver).executeScript(                    "var hidden = document.querySelectorAll('[style*=\"display: none\"], [style*=\"visibility: hidden\"]'); " +                            "return hidden.length;"            );            long hiddenElements = hiddenElementsNumber != null ? hiddenElementsNumber.longValue() : 0;            if (hiddenElements > 10) {                currentTest.info("Found " + hiddenElements + " hidden elements - review for optimization");            }        } catch (Exception e) {            currentTest.info("Optimization check incomplete: " + e.getMessage());        }    }}