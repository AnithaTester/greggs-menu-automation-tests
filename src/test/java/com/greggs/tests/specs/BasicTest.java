package com.greggs.tests.specs;import com.greggs.tests.BaseTest;import org.openqa.selenium.By;import org.openqa.selenium.WebElement;import org.testng.annotations.Test;import java.util.List;import static org.testng.Assert.assertTrue;@Test(groups = {"basic", "smoke", "regression"})public class BasicTest extends BaseTest {    @Test(groups = {"basic", "smoke", "critical"})    public void testHomePageLoads() {        try {            assignCategories("basic", "smoke", "critical");            addAuthor("Automation Team");            addDevice(config.getBrowser().toUpperCase());            logInfo("Testing homepage basic load functionality");            // Verify critical page elements            String title = driver.getTitle();            String currentUrl = driver.getCurrentUrl();            String pageSource = driver.getPageSource();            // Log page information            String[][] pageInfo = {                    {"Page Title", title},                    {"Current URL", currentUrl},                    {"Source Length", pageSource.length() + " characters"}            };            logTable(pageInfo, "Page Load Information");            // Critical assertions            verifyCondition(title != null && !title.isEmpty(),                    "Page has valid title",                    "Page must have a title");            verifyCondition(currentUrl.contains("greggs"),                    "Successfully navigated to Greggs website",                    "Should be on Greggs website");            verifyCondition(pageSource.length() > 1000,                    "Page has substantial content",                    "Page content seems limited");            // Additional validations            List<WebElement> images = driver.findElements(By.tagName("img"));            List<WebElement> links = driver.findElements(By.tagName("a"));            logLabeledInfo("Images Count", String.valueOf(images.size()));            logLabeledInfo("Links Count", String.valueOf(links.size()));            if (images.size() > 0) {                logSuccess("Page contains images - visual content present");            }            if (links.size() > 10) {                logSuccess("Adequate navigation links available");            }            logSuccess("Homepage load test PASSED - All critical checks completed");        } catch (Exception e) {            logFailure("Homepage load test FAILED: " + e.getMessage());            throw new RuntimeException("Homepage load test failed", e);        }    }    @Test(groups = {"basic", "navigation"})    public void testMenuPageNavigation() {        try {            assignCategories("basic", "navigation");            logInfo("Testing menu page navigation and accessibility");            // Navigate to menu page            String menuPageUrl = config.getBaseUrl() + "/menu";            logInfo("Navigating to menu page: " + menuPageUrl);            long startTime = System.currentTimeMillis();            driver.get(menuPageUrl);            long loadTime = System.currentTimeMillis() - startTime;            waitForPageLoad(2000);            String title = driver.getTitle();            String currentUrl = driver.getCurrentUrl();            // Log navigation results            String[][] navData = {                    {"Destination", menuPageUrl},                    {"Actual URL", currentUrl},                    {"Page Title", title},                    {"Load Time", loadTime + "ms"}            };            logTable(navData, "Navigation Results");            // Navigation assertions            verifyCondition(title != null && !title.isEmpty(),                    "Menu page has valid title",                    "Menu page should have a title");            verifyCondition(currentUrl.contains("menu") || currentUrl.contains("greggs"),                    "Successfully navigated to menu section",                    "Navigation may not have reached intended page");            // Performance check            softAssert(loadTime < 10000,                    "Menu page loaded in acceptable time",                    "Menu page load time (" + loadTime + "ms) is higher than expected");            logSuccess("Menu page navigation test PASSED");        } catch (Exception e) {            logFailure("Menu page navigation test FAILED: " + e.getMessage());            throw new RuntimeException("Menu page navigation test failed", e);        }    }    @Test(groups = {"basic", "content"})    public void testPageHasContent() {        try {            assignCategories("basic", "content");            logInfo("Testing page content availability and completeness");            // Comprehensive content checks            String pageSource = driver.getPageSource();            String title = driver.getTitle();            // Get various content elements            List<WebElement> images = driver.findElements(By.tagName("img"));            List<WebElement> links = driver.findElements(By.tagName("a"));            List<WebElement> headings = driver.findElements(By.xpath("//h1|//h2|//h3|//h4|//h5|//h6"));            List<WebElement> paragraphs = driver.findElements(By.tagName("p"));            // Log content summary            String[][] contentSummary = {                    {"Content Type", "Count"},                    {"Page Title", title != null ? "Present" : "Missing"},                    {"Source Length", pageSource.length() + " chars"},                    {"Images", String.valueOf(images.size())},                    {"Links", String.valueOf(links.size())},                    {"Headings", String.valueOf(headings.size())},                    {"Paragraphs", String.valueOf(paragraphs.size())}            };            logTable(contentSummary, "Page Content Summary");            // Content validation            verifyCondition(pageSource.length() > 1000,                    "Page has substantial content",                    "Page content seems insufficient");            verifyCondition(title != null && !title.isEmpty(),                    "Page has valid title",                    "Page title is missing");            // Additional content quality checks            softAssert(images.size() > 0,                    "Page contains visual elements",                    "No images found on page");            softAssert(links.size() > 5,                    "Adequate navigation available",                    "Limited navigation links");            softAssert(headings.size() > 0,                    "Content is properly structured with headings",                    "No heading elements found");            logSuccess("Page content test PASSED - Content structure is adequate");        } catch (Exception e) {            logFailure("Page content test FAILED: " + e.getMessage());            throw new RuntimeException("Page content test failed", e);        }    }    @Test(groups = {"basic", "functionality"})    public void testBasicNavigation() {        try {            assignCategories("basic", "functionality");            logInfo("Testing basic website navigation between pages");            String[] testPages = {                    config.getBaseUrl(),                    config.getBaseUrl() + "/menu",                    config.getBaseUrl() + "/our-story",                    config.getBaseUrl() + "/find-us"            };            int successfulNavigations = 0;            String[][] navigationResults = new String[testPages.length + 1][4];            navigationResults[0] = new String[]{"#", "Page", "Status", "Load Time"};            for (int i = 0; i < testPages.length; i++) {                String pageUrl = testPages[i];                logInfo("Navigating to page " + (i + 1) + ": " + pageUrl);                long startTime = System.currentTimeMillis();                driver.get(pageUrl);                long loadTime = System.currentTimeMillis() - startTime;                waitForPageLoad(2000);                String title = driver.getTitle();                String currentUrl = driver.getCurrentUrl();                boolean navigationSuccessful = title != null && !title.isEmpty() && currentUrl.contains("greggs");                if (navigationSuccessful) {                    successfulNavigations++;                    navigationResults[i + 1] = new String[]{                            String.valueOf(i + 1),                            pageUrl,                            "SUCCESS",                            loadTime + "ms"                    };                    logInfo("✓ Page " + (i + 1) + " navigation successful");                } else {                    navigationResults[i + 1] = new String[]{                            String.valueOf(i + 1),                            pageUrl,                            "FAILED",                            loadTime + "ms"                    };                    logWarning("✗ Page " + (i + 1) + " navigation issues");                }            }            logTable(navigationResults, "Multi-Page Navigation Results");            logLabeledInfo("Success Rate", successfulNavigations + "/" + testPages.length);            verifyCondition(successfulNavigations >= testPages.length - 1,                    "Majority of pages navigated successfully",                    "Multiple page navigation failures detected");            logSuccess("Basic navigation test PASSED");        } catch (Exception e) {            logFailure("Basic navigation test FAILED: " + e.getMessage());            throw new RuntimeException("Basic navigation test failed", e);        }    }    @Test(groups = {"basic", "smoke", "performance"})    public void testPageLoadPerformance() {        try {            assignCategories("basic", "smoke", "performance");            logInfo("Testing basic page load performance");            int iterations = 3;            long totalLoadTime = 0;            long minLoadTime = Long.MAX_VALUE;            long maxLoadTime = 0;            String[][] performanceData = new String[iterations + 1][3];            performanceData[0] = new String[]{"Iteration", "Load Time (ms)", "Status"};            for (int i = 0; i < iterations; i++) {                logInfo("Performance test iteration " + (i + 1));                long startTime = System.currentTimeMillis();                driver.get(config.getBaseUrl());                long loadTime = System.currentTimeMillis() - startTime;                totalLoadTime += loadTime;                minLoadTime = Math.min(minLoadTime, loadTime);                maxLoadTime = Math.max(maxLoadTime, loadTime);                String status = loadTime < 5000 ? "Excellent" :                        loadTime < 10000 ? "Good" :                                loadTime < 15000 ? "Acceptable" : "Slow";                performanceData[i + 1] = new String[]{                        String.valueOf(i + 1),                        String.valueOf(loadTime),                        status                };                waitForPageLoad(1000); // Brief pause between iterations            }            long averageLoadTime = totalLoadTime / iterations;            logTable(performanceData, "Page Load Performance Results");            String[][] summaryData = {                    {"Metric", "Value"},                    {"Iterations", String.valueOf(iterations)},                    {"Average Load Time", averageLoadTime + "ms"},                    {"Minimum Load Time", minLoadTime + "ms"},                    {"Maximum Load Time", maxLoadTime + "ms"}            };            logTable(summaryData, "Performance Summary");            // Performance assertions            verifyCondition(averageLoadTime < 15000,                    "Page load performance is acceptable",                    "Page load performance is below expectations");            softAssert(averageLoadTime < 10000,                    "Good page load performance achieved",                    "Page load performance has room for improvement");            logSuccess("Page load performance test PASSED");        } catch (Exception e) {            logFailure("Page load performance test FAILED: " + e.getMessage());            throw new RuntimeException("Page load performance test failed", e);        }    }    @Test(groups = {"basic", "validation"})    public void testWebsiteAvailability() {        try {            assignCategories("basic", "validation");            logInfo("Testing overall website availability and basic functionality");            String[] criticalPages = {                    config.getBaseUrl(),                    config.getBaseUrl() + "/menu",                    config.getBaseUrl() + "/our-story",                    config.getBaseUrl() + "/find-us",                    config.getBaseUrl() + "/nutrition"            };            int availablePages = 0;            String[][] availabilityResults = new String[criticalPages.length + 1][3];            availabilityResults[0] = new String[]{"Page", "Status", "Response"};            for (int i = 0; i < criticalPages.length; i++) {                String page = criticalPages[i];                logInfo("Checking availability: " + page);                try {                    driver.get(page);                    waitForPageLoad(2000);                    String title = driver.getTitle();                    String url = driver.getCurrentUrl();                    boolean pageAvailable = title != null && !title.isEmpty() &&                            url.contains("greggs") &&                            driver.getPageSource().length() > 500;                    if (pageAvailable) {                        availablePages++;                        availabilityResults[i + 1] = new String[]{page, "AVAILABLE", "✓"};                        logInfo("✓ Page available: " + page);                    } else {                        availabilityResults[i + 1] = new String[]{page, "ISSUES", "⚠"};                        logWarning("⚠ Page has issues: " + page);                    }                } catch (Exception e) {                    availabilityResults[i + 1] = new String[]{page, "FAILED", "✗"};                    logWarning("✗ Page failed to load: " + page);                }            }            logTable(availabilityResults, "Website Availability Check");            logLabeledInfo("Availability Score", availablePages + "/" + criticalPages.length);            verifyCondition(availablePages >= criticalPages.length - 1,                    "Website availability is good",                    "Multiple critical pages are unavailable");            logSuccess("Website availability test PASSED");        } catch (Exception e) {            logFailure("Website availability test FAILED: " + e.getMessage());            throw new RuntimeException("Website availability test failed", e);        }    }}