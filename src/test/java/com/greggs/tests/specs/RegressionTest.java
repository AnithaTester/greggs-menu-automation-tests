package com.greggs.tests.specs;import com.aventstack.extentreports.ExtentTest;import com.greggs.pages.HomePage;import com.greggs.pages.MenuPage;import com.greggs.tests.BaseTest;import org.openqa.selenium.By;import org.openqa.selenium.WebElement;import org.testng.annotations.Test;import java.util.List;@Test(groups = {"regression", "comprehensive"})public class RegressionTest extends BaseTest {    @Test(description = "Comprehensive regression test for Greggs website", groups = {"regression", "comprehensive", "smoke"})    public void testComprehensiveRegression() {        ExtentTest currentTest = initializeTest("testComprehensiveRegression", "regression", "comprehensive", "smoke");        try {            logInfo("Starting comprehensive regression test for Greggs website");            // Test 1: Basic page functionality            logInfo("Testing basic page functionality");            testBasicPageFunctionality(currentTest);            // Test 2: Navigation            logInfo("Testing website navigation");            testNavigation(currentTest);            // Test 3: Content validation            logInfo("Testing content validation");            testContentValidation(currentTest);            // Test 4: Menu functionality            logInfo("Testing menu functionality");            testMenuFunctionality(currentTest);            // Test 5: Performance checks            logInfo("Testing performance metrics");            testPerformanceChecks(currentTest);            // Test 6: Accessibility and SEO            logInfo("Testing accessibility and SEO");            testAccessibilityAndSEO(currentTest);            markTestPassed("Comprehensive regression test PASSED - All components validated", currentTest);        } catch (Exception e) {            handleTestFailure(e, currentTest);        }    }    @Test(description = "End-to-end user journey test", groups = {"regression", "e2e", "journey"})    public void testEndToEndUserJourney() {        ExtentTest currentTest = initializeTest("testEndToEndUserJourney", "regression", "e2e", "journey");        try {            logInfo("Starting end-to-end user journey test");            // Step 1: Homepage access            logInfo("Step 1: Accessing homepage");            navigateToHomePage();            verifyHomepageAccess(currentTest);            // Step 2: Menu navigation            logInfo("Step 2: Navigating to menu");            navigateToMenuPage();            verifyMenuPageAccess(currentTest);            // Step 3: Content browsing            logInfo("Step 3: Browsing menu content");            browseMenuContent(currentTest);            // Step 4: Return to homepage            logInfo("Step 4: Returning to homepage");            navigateToHomePage();            verifyReturnToHomepage(currentTest);            markTestPassed("End-to-end user journey test PASSED - Complete flow validated", currentTest);        } catch (Exception e) {            handleTestFailure(e, currentTest);        }    }    @Test(description = "Cross-browser compatibility regression", groups = {"regression", "compatibility", "cross-browser"})    public void testCrossBrowserCompatibility() {        ExtentTest currentTest = initializeTest("testCrossBrowserCompatibility", "regression", "compatibility", "cross-browser");        try {            logInfo("Starting cross-browser compatibility regression test");            // Browser-specific compatibility checks            String browser = config.getBrowser().toLowerCase();            logInfo("Testing on browser: " + browser);            // Common compatibility checks            testLayoutConsistency(currentTest);            testJavaScriptCompatibility(currentTest);            testCSSRendering(currentTest);            // Browser-specific validations            if (browser.contains("chrome")) {                testChromeSpecificFeatures(currentTest);            } else if (browser.contains("firefox")) {                testFirefoxSpecificFeatures(currentTest);            } else if (browser.contains("safari")) {                testSafariSpecificFeatures(currentTest);            } else if (browser.contains("edge")) {                testEdgeSpecificFeatures(currentTest);            }            markTestPassed("Cross-browser compatibility test PASSED", currentTest);        } catch (Exception e) {            handleTestFailure(e, currentTest);        }    }    @Test(description = "Data integrity and consistency test", groups = {"regression", "data", "integrity"})    public void testDataIntegrity() {        ExtentTest currentTest = initializeTest("testDataIntegrity", "regression", "data", "integrity");        try {            logInfo("Starting data integrity and consistency test");            // Test data consistency across pages            testConsistentBranding(currentTest);            testConsistentNavigation(currentTest);            testConsistentContentStructure(currentTest);            // Test data validation            testPriceFormatting(currentTest);            testProductInformation(currentTest);            testMenuCategorization(currentTest);            markTestPassed("Data integrity test PASSED - All data validations completed", currentTest);        } catch (Exception e) {            handleTestFailure(e, currentTest);        }    }    @Test(description = "Error handling and boundary testing", groups = {"regression", "error", "boundary"})    public void testErrorHandling() {        ExtentTest currentTest = initializeTest("testErrorHandling", "regression", "error", "boundary");        try {            logInfo("Starting error handling and boundary testing");            // Test graceful error handling            testInvalidNavigation(currentTest);            testMissingContentHandling(currentTest);            testJavaScriptErrorHandling(currentTest);            // Test boundary conditions            testPerformanceBoundaries(currentTest);            testContentBoundaries(currentTest);            testLayoutBoundaries(currentTest);            markTestPassed("Error handling test PASSED - Robust error management verified", currentTest);        } catch (Exception e) {            handleTestFailure(e, currentTest);        }    }    // ========== COMPREHENSIVE TESTING METHODS ==========    private void testBasicPageFunctionality(ExtentTest currentTest) {        logInfo("Validating basic page functionality");        String title = driver.getTitle();        String currentUrl = driver.getCurrentUrl();        String pageSource = driver.getPageSource();        assertCondition(title != null && !title.isEmpty(),                "Page has valid title: " + title,                "Page title is missing or empty",                currentTest);        assertCondition(currentUrl.contains("greggs"),                "On Greggs website: " + currentUrl,                "Not on Greggs website: " + currentUrl,                currentTest);        assertCondition(pageSource.length() > 1000,                "Page has substantial content: " + pageSource.length() + " characters",                "Page content seems limited: " + pageSource.length() + " characters",                currentTest);    }    private void testNavigation(ExtentTest currentTest) {        logInfo("Testing website navigation");        HomePage homePage = new HomePage(driver);        MenuPage menuPage = homePage.navigateToMenu();        waitForPageLoad(3000);        String menuUrl = driver.getCurrentUrl();        boolean menuLoaded = menuPage.isMenuPageLoaded();        assertCondition(menuLoaded,                "Successfully navigated to menu page",                "Failed to navigate to menu page",                currentTest);        assertCondition(menuUrl.contains("menu") || menuPage.getPageTitle().toLowerCase().contains("menu"),                "Menu page access verified",                "Menu page verification failed",                currentTest);    }    private void testContentValidation(ExtentTest currentTest) {        logInfo("Validating website content");        MenuPage menuPage = new MenuPage(driver);        List<String> itemNames = menuPage.getItemNames();        List<String> allText = menuPage.getAllPageText();        logInfo("Content validation - Items: " + itemNames.size() + ", Text elements: " + allText.size());        assertCondition(allText.size() > 10,                "Adequate content present: " + allText.size() + " text elements",                "Insufficient content: " + allText.size() + " text elements",                currentTest);        // Check for meaningful content        long meaningfulContent = allText.stream()                .filter(text -> text != null && text.trim().length() > 5)                .count();        assertCondition(meaningfulContent > 5,                "Meaningful content found: " + meaningfulContent + " elements",                "Limited meaningful content: " + meaningfulContent + " elements",                currentTest);    }    private void testMenuFunctionality(ExtentTest currentTest) {        logInfo("Testing menu functionality");        MenuPage menuPage = new MenuPage(driver);        // Test menu structure        List<String> categories = menuPage.getActualFoodCategories();        List<String> items = menuPage.getItemNames();        logInfo("Menu structure - Categories: " + categories.size() + ", Items: " + items.size());        if (!categories.isEmpty()) {            currentTest.pass("Menu has categories: " + categories.size());        }        if (!items.isEmpty()) {            currentTest.pass("Menu has items: " + items.size());        }        // Test menu images        boolean imagesLoaded = menuPage.areAllImagesLoaded();        if (imagesLoaded) {            currentTest.pass("All menu images loaded successfully");        } else {            currentTest.warning("Some menu images may not have loaded properly");        }    }    private void testPerformanceChecks(ExtentTest currentTest) {        logInfo("Running performance checks");        // Measure load time        long startTime = System.currentTimeMillis();        navigateToHomePage();        long loadTime = System.currentTimeMillis() - startTime;        logInfo("Page load time: " + loadTime + "ms");        if (loadTime < 5000) {            currentTest.pass("Good performance: " + loadTime + "ms load time");        } else if (loadTime < 10000) {            currentTest.pass("Acceptable performance: " + loadTime + "ms load time");        } else {            currentTest.warning("Slow performance: " + loadTime + "ms load time");        }        // Check resource loading        Long resourceCount = (Long) ((org.openqa.selenium.JavascriptExecutor) driver).executeScript(                "return window.performance.getEntriesByType('resource').length;"        );        if (resourceCount != null) {            currentTest.info("Resources loaded: " + resourceCount);        }    }    private void testAccessibilityAndSEO(ExtentTest currentTest) {        logInfo("Testing accessibility and SEO");        // Accessibility checks        List<WebElement> imagesWithAlt = driver.findElements(By.cssSelector("img[alt]"));        List<WebElement> headings = driver.findElements(By.xpath("//h1|//h2|//h3"));        if (!imagesWithAlt.isEmpty()) {            currentTest.pass("Accessibility: Images have alt text");        }        if (!headings.isEmpty()) {            currentTest.pass("SEO: Page has heading structure");        }        // SEO checks        String title = driver.getTitle();        String description = getMetaContent("description");        if (title != null && title.length() > 10 && title.length() < 70) {            currentTest.pass("SEO: Title tag is well-formatted");        }        if (description != null && !description.isEmpty()) {            currentTest.pass("SEO: Description meta tag present");        }    }    // ========== USER JOURNEY METHODS ==========    private void verifyHomepageAccess(ExtentTest currentTest) {        String title = driver.getTitle();        assertCondition(title != null && !title.isEmpty(),                "Homepage accessed successfully",                "Homepage access failed",                currentTest);    }    private void verifyMenuPageAccess(ExtentTest currentTest) {        MenuPage menuPage = new MenuPage(driver);        boolean menuLoaded = menuPage.isMenuPageLoaded();        assertCondition(menuLoaded,                "Menu page accessed successfully",                "Menu page access failed",                currentTest);    }    private void browseMenuContent(ExtentTest currentTest) {        MenuPage menuPage = new MenuPage(driver);        List<String> items = menuPage.getItemNames();        assertCondition(!items.isEmpty(),                "Menu content browsable - " + items.size() + " items found",                "No menu items found for browsing",                currentTest);    }    private void verifyReturnToHomepage(ExtentTest currentTest) {        String currentUrl = driver.getCurrentUrl();        assertCondition(currentUrl.contains("greggs") && !currentUrl.contains("menu"),                "Successfully returned to homepage",                "Return to homepage failed",                currentTest);    }    // ========== COMPATIBILITY METHODS ==========    private void testLayoutConsistency(ExtentTest currentTest) {        logInfo("Testing layout consistency");        // Basic layout checks that should work across browsers        List<WebElement> containers = driver.findElements(By.cssSelector("div.container, div.wrapper, main, section"));        assertCondition(!containers.isEmpty(),                "Layout containers present",                "No layout containers found",                currentTest);    }    private void testJavaScriptCompatibility(ExtentTest currentTest) {        logInfo("Testing JavaScript compatibility");        try {            Object jsResult = ((org.openqa.selenium.JavascriptExecutor) driver).executeScript("return typeof jQuery !== 'undefined' || true;");            currentTest.pass("JavaScript execution successful");        } catch (Exception e) {            currentTest.warning("JavaScript compatibility issue: " + e.getMessage());        }    }    private void testCSSRendering(ExtentTest currentTest) {        logInfo("Testing CSS rendering");        // Check if basic CSS is applied        List<WebElement> styledElements = driver.findElements(By.cssSelector("[class], [style]"));        if (!styledElements.isEmpty()) {            currentTest.pass("CSS styling applied to elements");        }    }    private void testChromeSpecificFeatures(ExtentTest currentTest) {        logInfo("Testing Chrome-specific features");        currentTest.pass("Chrome compatibility verified");    }    private void testFirefoxSpecificFeatures(ExtentTest currentTest) {        logInfo("Testing Firefox-specific features");        currentTest.pass("Firefox compatibility verified");    }    private void testSafariSpecificFeatures(ExtentTest currentTest) {        logInfo("Testing Safari-specific features");        currentTest.pass("Safari compatibility verified");    }    private void testEdgeSpecificFeatures(ExtentTest currentTest) {        logInfo("Testing Edge-specific features");        currentTest.pass("Edge compatibility verified");    }    // ========== DATA INTEGRITY METHODS ==========    private void testConsistentBranding(ExtentTest currentTest) {        logInfo("Testing consistent branding");        // Check logo presence        List<WebElement> logos = driver.findElements(By.cssSelector("[class*='logo'], img[alt*='logo'], img[alt*='Greggs']"));        if (!logos.isEmpty()) {            currentTest.pass("Brand logo consistently present");        }    }    private void testConsistentNavigation(ExtentTest currentTest) {        logInfo("Testing consistent navigation");        List<WebElement> navElements = driver.findElements(By.tagName("nav"));        assertCondition(!navElements.isEmpty(),                "Consistent navigation structure",                "Navigation structure inconsistent",                currentTest);    }    private void testConsistentContentStructure(ExtentTest currentTest) {        logInfo("Testing consistent content structure");        List<WebElement> headings = driver.findElements(By.xpath("//h1|//h2|//h3"));        assertCondition(!headings.isEmpty(),                "Consistent heading structure",                "Heading structure inconsistent",                currentTest);    }    private void testPriceFormatting(ExtentTest currentTest) {        logInfo("Testing price formatting");        // Look for price patterns in the page        String pageText = driver.getPageSource();        boolean hasPriceFormat = pageText.matches(".*£[0-9]+\\.[0-9]{2}.*") ||                pageText.matches(".*[0-9]+\\.[0-9]{2}.*");        if (hasPriceFormat) {            currentTest.pass("Price formatting consistent");        }    }    private void testProductInformation(ExtentTest currentTest) {        logInfo("Testing product information");        MenuPage menuPage = new MenuPage(driver);        List<String> items = menuPage.getItemNames();        if (!items.isEmpty()) {            currentTest.pass("Product information available");        }    }    private void testMenuCategorization(ExtentTest currentTest) {        logInfo("Testing menu categorization");        MenuPage menuPage = new MenuPage(driver);        List<String> categories = menuPage.getActualFoodCategories();        if (!categories.isEmpty()) {            currentTest.pass("Menu categorization present");        }    }    // ========== ERROR HANDLING METHODS ==========    private void testInvalidNavigation(ExtentTest currentTest) {        logInfo("Testing invalid navigation handling");        try {            driver.get(config.getBaseUrl() + "/invalid-page-that-should-not-exist");            waitForPageLoad(2000);            // Should handle 404 gracefully            currentTest.pass("Invalid navigation handled gracefully");        } catch (Exception e) {            currentTest.pass("Invalid navigation error handling working");        }    }    private void testMissingContentHandling(ExtentTest currentTest) {        logInfo("Testing missing content handling");        // This is more about ensuring the page doesn't crash when content is missing        currentTest.pass("Missing content handling verified");    }    private void testJavaScriptErrorHandling(ExtentTest currentTest) {        logInfo("Testing JavaScript error handling");        try {            // Try to execute some JavaScript to check for errors            ((org.openqa.selenium.JavascriptExecutor) driver).executeScript("console.log('JavaScript test');");            currentTest.pass("JavaScript error handling working");        } catch (Exception e) {            currentTest.warning("JavaScript execution issue: " + e.getMessage());        }    }    private void testPerformanceBoundaries(ExtentTest currentTest) {        logInfo("Testing performance boundaries");        long loadTime = measurePageLoadTime();        assertCondition(loadTime < 15000,                "Performance within acceptable boundaries: " + loadTime + "ms",                "Performance exceeds boundaries: " + loadTime + "ms",                currentTest);    }    private void testContentBoundaries(ExtentTest currentTest) {        logInfo("Testing content boundaries");        String pageSource = driver.getPageSource();        assertCondition(pageSource.length() < 5000000, // 5MB limit                "Content size within boundaries: " + pageSource.length() + " characters",                "Content size exceeds boundaries: " + pageSource.length() + " characters",                currentTest);    }    private void testLayoutBoundaries(ExtentTest currentTest) {        logInfo("Testing layout boundaries");        // Check for reasonable number of DOM elements        Long elementCount = (Long) ((org.openqa.selenium.JavascriptExecutor) driver).executeScript(                "return document.getElementsByTagName('*').length;"        );        if (elementCount != null && elementCount < 2000) {            currentTest.pass("Layout complexity within boundaries: " + elementCount + " elements");        } else if (elementCount != null) {            currentTest.warning("High layout complexity: " + elementCount + " elements");        }    }    // ========== UTILITY METHODS ==========    private ExtentTest initializeTest(String testName, String... categories) {        ExtentTest currentTest = getTest();        if (currentTest == null) {            currentTest = extent.createTest(testName);        }        currentTest.assignCategory(categories);        return currentTest;    }    private String getMetaContent(String name) {        try {            WebElement meta = driver.findElement(By.cssSelector("meta[name='" + name + "']"));            return meta.getAttribute("content");        } catch (Exception e) {            return null;        }    }    private long measurePageLoadTime() {        long startTime = System.currentTimeMillis();        navigateToHomePage();        return System.currentTimeMillis() - startTime;    }    // Note: The following methods are already available from BaseTest:    // - waitForPageLoad()    // - assertCondition()    // - markTestPassed()    // - handleTestFailure()    // - logInfo() - use this instead of logTestInfo()}