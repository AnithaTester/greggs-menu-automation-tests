package com.greggs.tests;import com.aventstack.extentreports.ExtentReports;import com.aventstack.extentreports.ExtentTest;import com.aventstack.extentreports.Status;import com.aventstack.extentreports.markuputils.ExtentColor;import com.aventstack.extentreports.markuputils.Markup;import com.aventstack.extentreports.markuputils.MarkupHelper;import com.aventstack.extentreports.reporter.ExtentSparkReporter;import com.greggs.config.DriverFactory;import com.greggs.config.TestConfig;import org.openqa.selenium.By;import org.openqa.selenium.WebDriver;import org.openqa.selenium.WebElement;import org.openqa.selenium.support.ui.WebDriverWait;import org.testng.ITestResult;import org.testng.annotations.*;import java.lang.reflect.Method;import java.time.Duration;import java.util.List;public class BaseTest {    protected WebDriver driver;    protected WebDriverWait wait;    protected static ExtentReports extent;    protected ThreadLocal<ExtentTest> test = new ThreadLocal<>();    protected TestConfig config;    @BeforeSuite    public void setUpSuite() {        System.out.println("Setting up test suite...");        // Create test-output directory if it doesn't exist        new java.io.File("test-output").mkdirs();        new java.io.File("test-output/screenshots").mkdirs();        // Configure ExtentSparkReporter with enhanced settings        ExtentSparkReporter sparkReporter = new ExtentSparkReporter("test-output/ExtentReport.html");        sparkReporter.config().setDocumentTitle("Greggs Automation Test Report");        sparkReporter.config().setReportName("Greggs Test Results");        sparkReporter.config().setTimelineEnabled(true);        sparkReporter.config().setEncoding("utf-8");        // Configure ExtentReports        extent = new ExtentReports();        extent.attachReporter(sparkReporter);        // Add comprehensive system information        extent.setSystemInfo("Organization", "Greggs");        extent.setSystemInfo("Browser", System.getProperty("browser", "chrome"));        extent.setSystemInfo("Environment", System.getProperty("environment", "production"));        extent.setSystemInfo("Java Version", System.getProperty("java.version"));        extent.setSystemInfo("OS", System.getProperty("os.name"));        extent.setSystemInfo("User", System.getProperty("user.name"));        System.out.println("Test suite setup completed");    }    @BeforeMethod    public void setUp(Method method) {        String methodName = method.getName();        System.out.println("=== Setting up test: " + methodName + " ===");        try {            // Initialize configuration FIRST            config = TestConfig.fromSystemProperties();            System.out.println("Config loaded - Browser: " + config.getBrowser() + ", Headless: " + config.isHeadless());            // Create ExtentTest instance for this test method            ExtentTest testInstance = extent.createTest(methodName);            test.set(testInstance);            System.out.println("ExtentTest instance created: " + methodName);            driver = DriverFactory.createDriver(config);            System.out.println("WebDriver created successfully");            wait = new WebDriverWait(driver, Duration.ofSeconds(config.getTimeout()));            System.out.println("Navigating to: " + config.getBaseUrl());            driver.get(config.getBaseUrl());            // Handle cookies automatically with enhanced retry logic            handleCookiesWithEnhancedRetry();            logInfo("Started " + config.getBrowser() + " browser");            logInfo("Navigated to: " + config.getBaseUrl());            logInfo("Mobile mode: " + config.isMobile());            logInfo("Headless mode: " + config.isHeadless());            System.out.println("=== Test setup completed for: " + methodName + " ===");        } catch (Exception e) {            System.err.println("!!! FAILED to set up test " + methodName + ": " + e.getMessage());            // Ensure test object exists for reporting the failure            if (test.get() == null) {                ExtentTest testInstance = extent.createTest(methodName);                test.set(testInstance);            }            logFailure("Test setup failed: " + e.getMessage());            closeDriverSafely();            throw new RuntimeException("Test setup failed for " + methodName, e);        }    }    @AfterMethod    public void tearDown(ITestResult result) {        String testName = result.getName();        System.out.println("=== Tearing down test: " + testName + " ===");        try {            ExtentTest currentTest = test.get();            if (currentTest != null) {                switch (result.getStatus()) {                    case ITestResult.FAILURE:                        currentTest.fail(MarkupHelper.createLabel(testName + " - FAILED", ExtentColor.RED));                        currentTest.fail("Failure reason: " + result.getThrowable().getMessage());                        // Capture screenshot on failure                        if (driver != null) {                            String screenshotPath = captureScreenshot(testName);                            if (!screenshotPath.isEmpty()) {                                currentTest.addScreenCaptureFromPath(screenshotPath);                                logInfo("Screenshot captured: " + screenshotPath);                            }                        }                        break;                    case ITestResult.SUCCESS:                        currentTest.pass(MarkupHelper.createLabel(testName + " - PASSED", ExtentColor.GREEN));                        break;                    case ITestResult.SKIP:                        currentTest.skip(MarkupHelper.createLabel(testName + " - SKIPPED", ExtentColor.ORANGE));                        break;                }            }        } catch (Exception e) {            System.err.println("Error during test teardown: " + e.getMessage());        } finally {            closeDriverSafely();            test.remove();            System.out.println("=== Test teardown completed for: " + testName + " ===");        }    }    @AfterSuite    public void tearDownSuite() {        System.out.println("Tearing down test suite...");        if (extent != null) {            extent.flush();            System.out.println("Extent reports flushed successfully");        }        System.out.println("Test suite teardown completed");    }    // ========== NAVIGATION METHODS ==========    protected void navigateToHomePage() {        if (config == null) {            throw new IllegalStateException("TestConfig is not initialized. Make sure setUp() is called first.");        }        driver.get(config.getBaseUrl());        waitForPageLoad(3000);    }    protected void navigateToMenuPage() {        if (config == null) {            throw new IllegalStateException("TestConfig is not initialized. Make sure setUp() is called first.");        }        driver.get(config.getBaseUrl() + "/menu");        waitForPageLoad(3000);    }    // ========== ENHANCED LOGGING METHODS ==========    protected void logInfo(String message) {        ExtentTest currentTest = test.get();        if (currentTest != null) {            currentTest.log(Status.INFO, message);        }        System.out.println("INFO: " + message);    }    protected void logFailure(String message) {        ExtentTest currentTest = test.get();        if (currentTest != null) {            currentTest.log(Status.FAIL, message);        }        System.err.println("FAIL: " + message);    }    protected void logFailure(Markup markup) {        ExtentTest currentTest = test.get();        if (currentTest != null) {            currentTest.log(Status.FAIL, markup);        }        System.err.println("FAIL: " + markup.getMarkup());    }    protected void logWarning(String message) {        ExtentTest currentTest = test.get();        if (currentTest != null) {            currentTest.log(Status.WARNING, message);        }        System.out.println("WARNING: " + message);    }    protected void logSuccess(String message) {        ExtentTest currentTest = test.get();        if (currentTest != null) {            currentTest.log(Status.PASS, message);        }        System.out.println("SUCCESS: " + message);    }    protected void logSuccess(Markup markup) {        ExtentTest currentTest = test.get();        if (currentTest != null) {            currentTest.log(Status.PASS, markup);        }        System.out.println("SUCCESS: " + markup.getMarkup());    }    // ========== TEST MANAGEMENT METHODS ==========    protected ExtentTest getTest() {        return test.get();    }    protected void assignCategories(String... categories) {        ExtentTest currentTest = test.get();        if (currentTest != null) {            currentTest.assignCategory(categories);        }    }    // ========== UTILITY METHODS ==========    protected void waitForPageLoad(int milliseconds) {        try {            Thread.sleep(milliseconds);        } catch (InterruptedException e) {            Thread.currentThread().interrupt();        }    }    protected void addAuthor(String author) {        ExtentTest currentTest = getTest();        if (currentTest != null) {            currentTest.assignAuthor(author);        }        logInfo("Test Author: " + author);    }    protected void addDevice(String device) {        ExtentTest currentTest = getTest();        if (currentTest != null) {            currentTest.assignDevice(device);        }        logInfo("Test Device: " + device);    }    protected void logTable(String[][] data, String title) {        ExtentTest currentTest = getTest();        // Create a formatted table string        StringBuilder tableBuilder = new StringBuilder();        tableBuilder.append("<b>").append(title).append("</b><br/>");        tableBuilder.append("<table border='1' style='border-collapse: collapse;'>");        for (int i = 0; i < data.length; i++) {            tableBuilder.append("<tr>");            for (String cell : data[i]) {                if (i == 0) {                    tableBuilder.append("<th style='padding: 5px; background-color: #f2f2f2;'>")                            .append(cell != null ? cell : "")                            .append("</th>");                } else {                    tableBuilder.append("<td style='padding: 5px;'>")                            .append(cell != null ? cell : "")                            .append("</td>");                }            }            tableBuilder.append("</tr>");        }        tableBuilder.append("</table>");        if (currentTest != null) {            currentTest.info(tableBuilder.toString());        }        // Also log to console        System.out.println("=== " + title + " ===");        for (String[] row : data) {            System.out.println(String.join(" | ", row));        }        System.out.println("=================");    }    protected void logLabeledInfo(String label, String value) {        logInfo(label + ": " + value);    }    protected void verifyCondition(boolean condition, String successMessage, String failureMessage) {        ExtentTest currentTest = getTest();        if (condition) {            if (currentTest != null) {                currentTest.pass(successMessage);            }            System.out.println("✓ " + successMessage);        } else {            if (currentTest != null) {                currentTest.fail(failureMessage);            }            System.err.println("✗ " + failureMessage);            throw new AssertionError(failureMessage);        }    }    protected void softAssert(boolean condition, String successMessage, String failureMessage) {        ExtentTest currentTest = getTest();        if (condition) {            if (currentTest != null) {                currentTest.pass(successMessage);            }            System.out.println("✓ " + successMessage);        } else {            if (currentTest != null) {                currentTest.warning(failureMessage);            }            System.out.println("⚠ " + failureMessage);        }    }    protected void markTestPassed(String message, ExtentTest currentTest) {        if (currentTest != null) {            currentTest.pass(MarkupHelper.createLabel(message, ExtentColor.GREEN));        }        System.out.println("✓ " + message);    }    protected void markTestCompletedWithWarnings(String message, ExtentTest currentTest) {        if (currentTest != null) {            currentTest.warning(MarkupHelper.createLabel(message, ExtentColor.ORANGE));        }        System.out.println("⚠ " + message);    }    protected void handleTestFailure(Exception e, ExtentTest currentTest) {        String errorMessage = "Test failed: " + e.getMessage();        if (currentTest != null) {            currentTest.log(Status.FAIL, errorMessage);            currentTest.fail(e);        }        System.err.println("✗ " + errorMessage);        throw new RuntimeException(e);    }    protected void assertCondition(boolean condition, String successMessage, String failureMessage, ExtentTest currentTest) {        if (currentTest != null) {            if (condition) {                currentTest.pass(successMessage);            } else {                currentTest.fail(failureMessage);            }        }        if (!condition) {            throw new AssertionError(failureMessage);        }    }    // ========== SIMPLIFIED COOKIE HANDLING ==========    /**     * Handle cookies with enhanced retry logic     */    private void handleCookiesWithEnhancedRetry() {        try {            logInfo("Attempting to handle cookie consent...");            // Try multiple approaches to handle cookies            int maxRetries = 2;            boolean cookiesHandled = false;            for (int attempt = 1; attempt <= maxRetries; attempt++) {                logInfo("Cookie handling attempt " + attempt + " of " + maxRetries);                try {                    // Wait for page to be ready                    waitForPageLoad(2000);                    // Try to handle cookies using alternative method                    cookiesHandled = tryAlternativeCookieHandling();                    if (cookiesHandled) {                        logSuccess("Cookie consent handled successfully on attempt " + attempt);                        break;                    }                } catch (Exception e) {                    logWarning("Cookie handling attempt " + attempt + " failed: " + e.getMessage());                    if (attempt == maxRetries) {                        logWarning("All cookie handling attempts failed, continuing without cookie consent handling");                    } else {                        waitForPageLoad(1000);                    }                }            }            if (!cookiesHandled) {                logInfo("Could not handle cookie consent - continuing with tests");            }        } catch (Exception e) {            logWarning("Error in cookie handling: " + e.getMessage());        }    }    /**     * Alternative cookie handling approach     */    private boolean tryAlternativeCookieHandling() {        try {            // Common cookie consent selectors            String[] cookieSelectors = {                    "button[aria-label*='cookie']",                    "button[aria-label*='Cookie']",                    "button[id*='cookie']",                    "button[id*='Cookie']",                    "button[class*='cookie']",                    "button[class*='Cookie']",                    "button[data-testid*='cookie']",                    ".cookie-consent button",                    "#cookie-consent button",                    "button[onclick*='cookie']",                    "button[onclick*='Cookie']"            };            for (String selector : cookieSelectors) {                try {                    List<WebElement> elements = driver.findElements(By.cssSelector(selector));                    for (WebElement element : elements) {                        if (element.isDisplayed() && element.isEnabled()) {                            try {                                element.click();                                waitForPageLoad(1000);                                logInfo("Clicked cookie consent button with selector: " + selector);                                return true;                            } catch (Exception e) {                                logWarning("Failed to click cookie button with selector " + selector);                            }                        }                    }                } catch (Exception e) {                    // Continue to next selector                }            }            return false;        } catch (Exception e) {            logWarning("Alternative cookie handling failed: " + e.getMessage());            return false;        }    }    /**     * Safely close the WebDriver     */    protected void closeDriverSafely() {        if (driver != null) {            try {                logInfo("Closing WebDriver...");                driver.quit();                logInfo("WebDriver closed successfully");            } catch (Exception e) {                logWarning("Error closing WebDriver: " + e.getMessage());            } finally {                driver = null;            }        }    }    /**     * Capture screenshot on test failure     */    private String captureScreenshot(String testName) {        try {            java.io.File screenshotsDir = new java.io.File("test-output/screenshots");            if (!screenshotsDir.exists()) {                screenshotsDir.mkdirs();            }            if (driver instanceof org.openqa.selenium.TakesScreenshot) {                org.openqa.selenium.TakesScreenshot ts = (org.openqa.selenium.TakesScreenshot) driver;                java.io.File source = ts.getScreenshotAs(org.openqa.selenium.OutputType.FILE);                String timeStamp = new java.text.SimpleDateFormat("yyyyMMdd_HHmmss").format(new java.util.Date());                String fileName = testName + "_" + timeStamp + ".png";                String filePath = "test-output/screenshots/" + fileName;                org.apache.commons.io.FileUtils.copyFile(source, new java.io.File(filePath));                logInfo("Screenshot saved: " + filePath);                return filePath;            } else {                logWarning("Driver does not support screenshots");                return "";            }        } catch (Exception e) {            logWarning("Failed to capture screenshot: " + e.getMessage());            return "";        }    }}