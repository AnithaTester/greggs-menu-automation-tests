package com.greggs.utils;import org.openqa.selenium.By;import org.openqa.selenium.WebDriver;import org.openqa.selenium.WebElement;import org.openqa.selenium.support.ui.ExpectedConditions;import org.openqa.selenium.support.ui.WebDriverWait;import java.time.Duration;import java.util.List;import java.util.logging.Logger;public class CookieConsentHandler {    private static final Logger logger = Logger.getLogger(CookieConsentHandler.class.getName());    private final WebDriver driver;    private final WebDriverWait wait;    public CookieConsentHandler(WebDriver driver) {        this.driver = driver;        this.wait = new WebDriverWait(driver, Duration.ofSeconds(10));    }    public void handleCookieConsent() {        try {            // Wait a bit for the page to load completely            Thread.sleep(2000);            // Try multiple cookie banner selectors            List<By> cookieBannerSelectors = List.of(                    By.cssSelector("div[class*='cookie'], [class*='banner'], [id*='cookie']"),                    By.cssSelector(".cookie-consent, .cookie-banner, .cookie-notice"),                    By.cssSelector("[data-testid*='cookie'], [data-cookie*='banner']"),                    By.cssSelector("#cookie-consent, #cookie-banner, #cookie-notice"),                    By.xpath("//*[contains(text(), 'cookie') or contains(text(), 'Cookie')]//ancestor::div[1]")            );            boolean bannerFound = false;            for (By selector : cookieBannerSelectors) {                try {                    List<WebElement> banners = driver.findElements(selector);                    if (!banners.isEmpty() && banners.get(0).isDisplayed()) {                        bannerFound = true;                        logger.info("Cookie banner found with selector: " + selector);                        break;                    }                } catch (Exception e) {                    // Continue to next selector                }            }            if (!bannerFound) {                logger.info("No cookie banner found on the page");                return;            }            // Try different accept button selectors            List<By> acceptButtonSelectors = List.of(                    By.xpath("//button[contains(text(), 'Accept') or contains(text(), 'Allow') or contains(text(), 'Agree')]"),                    By.cssSelector("button[class*='accept'], button[class*='allow'], button[class*='agree']"),                    By.cssSelector("[data-testid*='accept'], [data-testid*='allow']"),                    By.id("accept-cookies"),                    By.cssSelector("#accept-cookies, .accept-cookies, .cookie-accept"),                    By.xpath("//a[contains(text(), 'Accept') or contains(text(), 'Allow')]")            );            for (By selector : acceptButtonSelectors) {                try {                    WebElement acceptButton = wait.until(ExpectedConditions.elementToBeClickable(selector));                    if (acceptButton.isDisplayed() && acceptButton.isEnabled()) {                        acceptButton.click();                        logger.info("Cookie consent accepted using selector: " + selector);                        // Wait for banner to disappear                        waitForBannerToDisappear();                        return;                    }                } catch (Exception e) {                    logger.fine("Accept button selector failed: " + selector + " - " + e.getMessage());                }            }            // If no accept button found, try to close the banner            closeCookieBanner();        } catch (Exception e) {            logger.info("Error handling cookie consent: " + e.getMessage());        }    }    private void waitForBannerToDisappear() {        try {            // Wait for any cookie banner to disappear            wait.until(ExpectedConditions.invisibilityOfElementLocated(                    By.cssSelector("div[class*='cookie'], [class*='banner'], [id*='cookie']")            ));            Thread.sleep(1000); // Additional wait        } catch (Exception e) {            logger.fine("Error waiting for banner to disappear: " + e.getMessage());        }    }    private void closeCookieBanner() {        try {            // Try close button selectors            List<By> closeButtonSelectors = List.of(                    By.cssSelector(".close, .modal-close, [aria-label*='close'], [class*='close']"),                    By.cssSelector("button[class*='close'], [data-dismiss='modal']"),                    By.xpath("//button[contains(text(), 'Ã—') or contains(text(), 'Close')]")            );            for (By selector : closeButtonSelectors) {                try {                    WebElement closeButton = wait.until(ExpectedConditions.elementToBeClickable(selector));                    if (closeButton.isDisplayed()) {                        closeButton.click();                        logger.info("Cookie banner closed using selector: " + selector);                        waitForBannerToDisappear();                        return;                    }                } catch (Exception e) {                    // Continue to next selector                }            }            logger.warning("Could not find any way to close the cookie banner");        } catch (Exception e) {            logger.warning("Error closing cookie banner: " + e.getMessage());        }    }    public boolean isCookieBannerPresent() {        try {            List<WebElement> banners = driver.findElements(                    By.cssSelector("div[class*='cookie'], [class*='banner'], [id*='cookie']")            );            return !banners.isEmpty() && banners.get(0).isDisplayed();        } catch (Exception e) {            return false;        }    }    public void rejectAllCookies() {        try {            List<By> rejectButtonSelectors = List.of(                    By.xpath("//button[contains(text(), 'Reject') or contains(text(), 'Decline')]"),                    By.cssSelector("button[class*='reject'], button[class*='decline']"),                    By.cssSelector("[data-testid*='reject']")            );            for (By selector : rejectButtonSelectors) {                try {                    WebElement rejectButton = wait.until(ExpectedConditions.elementToBeClickable(selector));                    rejectButton.click();                    logger.info("Cookies rejected using selector: " + selector);                    waitForBannerToDisappear();                    return;                } catch (Exception e) {                    logger.fine("Reject selector failed: " + selector + " - " + e.getMessage());                }            }            logger.warning("No cookie reject button found");        } catch (Exception e) {            logger.warning("Error rejecting cookies: " + e.getMessage());        }    }    public void configureCookiePreferences(boolean necessary, boolean analytics, boolean marketing) {        try {            // Click on preferences/settings button            List<By> settingsSelectors = List.of(                    By.xpath("//button[contains(text(), 'Settings') or contains(text(), 'Preferences') or contains(text(), 'Choose')]"),                    By.cssSelector("button[class*='setting'], button[class*='preference']"),                    By.cssSelector("[data-testid*='settings']")            );            for (By selector : settingsSelectors) {                try {                    WebElement settingsButton = wait.until(ExpectedConditions.elementToBeClickable(selector));                    settingsButton.click();                    break;                } catch (Exception e) {                    // Continue to next selector                }            }            // Wait for preferences dialog to appear            Thread.sleep(1000);            // Configure preferences (simplified implementation)            configurePreferenceToggle("analytics", analytics);            configurePreferenceToggle("marketing", marketing);            // Save preferences            saveCookiePreferences();        } catch (Exception e) {            logger.warning("Could not configure cookie preferences: " + e.getMessage());        }    }    private void configurePreferenceToggle(String preferenceType, boolean enable) {        try {            List<By> toggleSelectors = List.of(                    By.cssSelector("[data-type='" + preferenceType + "'], [for*='" + preferenceType + "']"),                    By.cssSelector("input[type='checkbox'][id*='" + preferenceType + "']"),                    By.xpath("//label[contains(text(), '" + preferenceType + "')]//preceding-sibling::input[@type='checkbox']")            );            for (By selector : toggleSelectors) {                try {                    WebElement toggle = driver.findElement(selector);                    boolean isCurrentlySelected = toggle.isSelected();                    if (enable && !isCurrentlySelected) {                        toggle.click();                    } else if (!enable && isCurrentlySelected) {                        toggle.click();                    }                    break;                } catch (Exception e) {                    // Continue to next selector                }            }        } catch (Exception e) {            logger.warning("Could not configure " + preferenceType + " preference: " + e.getMessage());        }    }    private void saveCookiePreferences() {        try {            List<By> saveSelectors = List.of(                    By.xpath("//button[contains(text(), 'Save') or contains(text(), 'Confirm')]"),                    By.cssSelector("button[class*='save'], button[class*='confirm']"),                    By.cssSelector("[data-testid*='save']")            );            for (By selector : saveSelectors) {                try {                    WebElement saveButton = wait.until(ExpectedConditions.elementToBeClickable(selector));                    saveButton.click();                    logger.info("Cookie preferences saved");                    waitForBannerToDisappear();                    return;                } catch (Exception e) {                    // Continue to next selector                }            }        } catch (Exception e) {            logger.warning("Could not save cookie preferences: " + e.getMessage());        }    }}