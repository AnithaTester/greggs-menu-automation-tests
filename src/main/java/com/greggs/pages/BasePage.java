package com.greggs.pages;import org.openqa.selenium.JavascriptExecutor;import org.openqa.selenium.WebDriver;import org.openqa.selenium.WebElement;import org.openqa.selenium.support.ui.WebDriverWait;import java.time.Duration;public class BasePage {    protected WebDriver driver;    protected WebDriverWait wait;    protected JavascriptExecutor js;    public BasePage(WebDriver driver) {        if (driver == null) {            throw new IllegalArgumentException("WebDriver cannot be null");        }        this.driver = driver;        this.wait = new WebDriverWait(driver, Duration.ofSeconds(15));        this.js = (JavascriptExecutor) driver;    }    // Add waitForPageToLoad method here    protected void waitForPageToLoad() {        try {            wait.until(webDriver -> {                Object result = js.executeScript("return document.readyState");                return "complete".equals(result);            });            // Additional wait for any dynamic content            Thread.sleep(1000);        } catch (Exception e) {            System.err.println("Error waiting for page to load: " + e.getMessage());        }    }    protected void scrollToElement(WebElement element) {        js.executeScript("arguments[0].scrollIntoView(true);", element);    }    protected void click(WebElement element) {        // Simple click implementation        try {            element.click();        } catch (Exception e) {            // Fallback: JavaScript click            js.executeScript("arguments[0].click();", element);        }    }    protected void type(WebElement element, String text) {        element.clear();        element.sendKeys(text);    }    protected boolean isElementDisplayed(WebElement element) {        try {            return element.isDisplayed();        } catch (Exception e) {            return false;        }    }    protected boolean isElementPresent(WebElement element) {        try {            return element != null;        } catch (Exception e) {            return false;        }    }    protected boolean isElementEnabled(WebElement element) {        try {            return element.isEnabled();        } catch (Exception e) {            return false;        }    }    protected String getElementText(WebElement element) {        try {            return element.getText();        } catch (Exception e) {            return "";        }    }    protected String getElementAttribute(WebElement element, String attribute) {        try {            return element.getAttribute(attribute);        } catch (Exception e) {            return "";        }    }    protected void clearField(WebElement element) {        try {            element.clear();        } catch (Exception e) {            // Fallback: Select all and delete            element.sendKeys(org.openqa.selenium.Keys.CONTROL + "a");            element.sendKeys(org.openqa.selenium.Keys.DELETE);        }    }}