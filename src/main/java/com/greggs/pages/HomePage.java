package com.greggs.pages;import org.openqa.selenium.WebDriver;import org.openqa.selenium.WebElement;import org.openqa.selenium.support.FindBy;import org.openqa.selenium.support.PageFactory;import java.util.List;public class HomePage extends BasePage {    // Cookie consent button - using multiple possible selectors    @FindBy(xpath = "//button[contains(text(), 'Accept') or contains(text(), 'Allow')]")    private WebElement acceptCookiesButton;    @FindBy(linkText = "Our menu")    private WebElement menuLink;    @FindBy(xpath = "//a[contains(text(), 'Menu')]")    private WebElement menuLinkAlt;    @FindBy(css = "nav, header, [role='navigation']")    private WebElement mainNavigation;    @FindBy(css = ".cookie-banner, [class*='cookie']")    private WebElement cookieBanner;    @FindBy(css = "a[href*='menu'], .menu-link, [data-link*='menu']")    private List<WebElement> menuLinks;    public HomePage(WebDriver driver) {        super(driver);        PageFactory.initElements(driver, this);    }    public void acceptCookies() {        try {            waitForPageToLoad(); // Use inherited method            if (isElementDisplayed(acceptCookiesButton)) {                click(acceptCookiesButton);                System.out.println("Cookie banner accepted");            } else {                System.out.println("Cookie banner not found or already accepted");            }        } catch (Exception e) {            System.out.println("Error handling cookies: " + e.getMessage());        }    }    public MenuPage navigateToMenu() {        try {            waitForPageToLoad(); // Use inherited method            // Try multiple navigation methods            // Method 1: Look for menu links in navigation            for (WebElement menuLink : menuLinks) {                if (isElementDisplayed(menuLink) && isElementEnabled(menuLink)) {                    click(menuLink);                    waitForPageToLoad();                    return new MenuPage(driver);                }            }            // Method 2: Try direct URL navigation            System.out.println("No menu link found, trying direct URL navigation");            String currentUrl = driver.getCurrentUrl();            if (!currentUrl.contains("/menu")) {                driver.get(currentUrl + "/menu");                waitForPageToLoad();            }            // Method 3: Look for menu in page content            List<WebElement> menuElements = driver.findElements(                    org.openqa.selenium.By.xpath("//*[contains(text(), 'Menu') or contains(text(), 'menu')]")            );            for (WebElement element : menuElements) {                if (isElementDisplayed(element) && isElementEnabled(element)) {                    click(element);                    waitForPageToLoad();                    break;                }            }        } catch (Exception e) {            System.out.println("Error navigating to menu: " + e.getMessage());            // Fallback: try common menu URLs            try {                driver.get("https://www.greggs.co.uk/menu");                waitForPageToLoad();            } catch (Exception ex) {                System.out.println("Fallback navigation also failed: " + ex.getMessage());            }        }        return new MenuPage(driver);    }    public boolean isNavigationDisplayed() {        return isElementDisplayed(mainNavigation);    }    public boolean isCookieBannerDisplayed() {        return isElementDisplayed(acceptCookiesButton);    }}